<?php
/**
 * Application configuration data.  Data here has no GUI to edit it,
 * although most of it can be altered to customise local installations.
 *
 * NOTE: The one-item-per-line and extra-comma-after-last-item approach
 * is used to allow SVN to reliably merge changes for users that have
 * customised their local copy of this file.
 *
 * webtrees: Web based Family History software
 * Copyright (C) 2010 webtrees development team.
 *
 * Derived from PhpGedView
 * Copyright (C) 2010 PGV Development Team.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @version $Id$
 */

if (!defined('WT_WEBTREES')) {
	header('HTTP/1.0 403 Forbidden');
	exit;
}

define('WT_CONFIG_DATA_PHP', '');

// Unknown surname in various scripts
// TODO: This is extremely poor I18N - there is not a 1:1 correlation between script and language
$UNKNOWN_NN=array(
	'hebrew'    =>'(לא-ידוע)',
	'arabic'    =>'(غير معروف)',
	'greek'     =>'(άγνωστος/η)',
	'russian'   =>'(неопределено)',
	'cyrillic'  =>'(неопределено)',
	'han'       =>'(未知)',
	'latin'     =>WT_I18N::translate_c('surname', '(unknown)'),
	'common'    =>WT_I18N::translate_c('surname', '(unknown)'),
);

// Unknown givne name in various scripts
// TODO: This is extremely poor I18N - there is not a 1:1 correlation between script and language
$UNKNOWN_PN=array(
	'hebrew'    =>'(לא-ידוע)',
	'arabic'    =>'(غير معروف)',
	'greek'     =>'(άγνωστος/η)',
	'russian'   =>'(неопределено)',
	'cyrillic'   =>'(неопределено)',
	'han'       =>'(未知)',
	'latin'     =>WT_I18N::translate_c('given name', '(unknown)'),
	'common'    =>WT_I18N::translate_c('given name', '(unknown)'),
);

// Type attribute of a media object
$MEDIA_TYPES=array(
	'audio'      =>WT_I18N::translate('Audio'),
	'book'       =>WT_I18N::translate('Book'),
	'card'       =>WT_I18N::translate('Card'),
	'certificate'=>WT_I18N::translate('Certificate'),
	'coat'       =>WT_I18N::translate('Coat of Arms'),
	'document'   =>WT_I18N::translate('Document'),
	'electronic' =>WT_I18N::translate('Electronic'),
	'fiche'      =>WT_I18N::translate('Microfiche'),
	'film'       =>WT_I18N::translate('Microfilm'),
	'magazine'   =>WT_I18N::translate('Magazine'),
	'manuscript' =>WT_I18N::translate('Manuscript'),
	'map'        =>WT_I18N::translate('Map'),
	'newspaper'  =>WT_I18N::translate('Newspaper'),
	'photo'      =>WT_I18N::translate('Photo'),
	'tombstone'  =>WT_I18N::translate('Tombstone'),
	'video'      =>WT_I18N::translate('Video'),
	'painting'   =>WT_I18N::translate('Painting'),
	'other'      =>WT_I18N::translate('Other'),
);

// GEDCOM ADOP codes
$ADOP_CODES=array(
	'BOTH'=>WT_I18N::translate('Adopted by both parents'),
	'HUSB'=>WT_I18N::translate('Adopted by father'),
	'WIFE'=>WT_I18N::translate('Adopted by mother'),
);

// GEDCOM ADOP Female codes
$ADOP_CODES_F=array(
	'BOTH'=>WT_I18N::translate_c('FEMALE', 'Adopted by both parents'),
	'HUSB'=>WT_I18N::translate_c('FEMALE', 'Adopted by father'),
	'WIFE'=>WT_I18N::translate_c('FEMALE', 'Adopted by mother'),
);

// GEDCOM ADOP Male codes
$ADOP_CODES_M=array(
	'BOTH'=>WT_I18N::translate_c('MALE', 'Adopted by both parents'),
	'HUSB'=>WT_I18N::translate_c('MALE', 'Adopted by father'),
	'WIFE'=>WT_I18N::translate_c('MALE', 'Adopted by mother'),
);

// GEDCOM PEDI codes
$PEDI_CODES=array(
	'birth'  =>WT_I18N::translate_c('Pedigree', 'Birth'),
	'adopted'=>WT_I18N::translate_c('Pedigree', 'Adopted'),
	'foster' =>WT_I18N::translate_c('Pedigree', 'Foster'),
	'sealing'=>WT_I18N::translate_c('Pedigree', 'Sealing'),
);

// GEDCOM PEDI Female codes
$PEDI_CODES_F=array(
	'birth'  =>WT_I18N::translate_c('Female pedigree', 'Birth'),
	'adopted'=>WT_I18N::translate_c('Female pedigree', 'Adopted'),
	'foster' =>WT_I18N::translate_c('Female pedigree', 'Foster'),
	'sealing'=>WT_I18N::translate_c('Female pedigree', 'Sealing'),
);

// GEDCOM PEDI Male codes
$PEDI_CODES_M=array(
	'birth'  =>WT_I18N::translate_c('Male pedigree', 'Birth'),
	'adopted'=>WT_I18N::translate_c('Male pedigree', 'Adopted'),
	'foster' =>WT_I18N::translate_c('Male pedigree', 'Foster'),
	'sealing'=>WT_I18N::translate_c('Male pedigree', 'Sealing'),
);

// GEDCOM RELA codes for non-genealogical relationships.
// These aren't part of the standard, but we list the common ones here so we can translate them.
$RELA_CODES=array(
	'attendant'       =>WT_I18N::translate('Attendant'),
	'attending'       =>WT_I18N::translate('Attending'),
	'best_man'        =>WT_I18N::translate('Best Man'),
	'bridesmaid'      =>WT_I18N::translate('Bridesmaid'),
	'buyer'           =>WT_I18N::translate('Buyer'),
	'circumciser'     =>WT_I18N::translate('Circumciser'),
	'civil_registrar' =>WT_I18N::translate('Civil Registrar'),
	'employee'        =>WT_I18N::translate('Employee'),
	'employer'        =>WT_I18N::translate('Employer'),
	'foster_child'    =>WT_I18N::translate('Foster Child'),
	'foster_father'   =>WT_I18N::translate('Foster Father'),
	'foster_mother'   =>WT_I18N::translate('Foster Mother'),
	'friend'          =>WT_I18N::translate('Friend'),
	'godfather'       =>WT_I18N::translate('Godfather'),
	'godmother'       =>WT_I18N::translate('Godmother'),
	'godparent'       =>WT_I18N::translate('Godparent'),
	'godson'          =>WT_I18N::translate('Godson'),
	'goddaughter'     =>WT_I18N::translate('Goddaughter'),
	'godchild'        =>WT_I18N::translate('Godchild'),
	'guardian'        =>WT_I18N::translate('Guardian'),
	'informant'       =>WT_I18N::translate('Informant'),
	'lodger'          =>WT_I18N::translate('Lodger'),
	'nanny'           =>WT_I18N::translate('Nanny'),
	'nurse'           =>WT_I18N::translate('Nurse'),
	'owner'           =>WT_I18N::translate('Owner'),
	'priest'          =>WT_I18N::translate('Priest'),
	'rabbi'           =>WT_I18N::translate('Rabbi'),
	'registry_officer'=>WT_I18N::translate('Registry Officer'),
	'seller'          =>WT_I18N::translate('Seller'),
	'servant'         =>WT_I18N::translate('Servant'),
	'slave'           =>WT_I18N::translate('Slave'),
	'ward'            =>WT_I18N::translate('Ward'),
	'witness'         =>WT_I18N::translate('Witness'),
);

// GEDCOM RELA codes for non-genealogical relationships.
// These aren't part of the standard, but we list the common ones here so we can translate them.
$RELA_CODES_F=array(
	'attendant'       =>WT_I18N::translate_c('FEMALE', 'Attendant'),
	'attending'       =>WT_I18N::translate_c('FEMALE', 'Attending'),
	'buyer'           =>WT_I18N::translate_c('FEMALE', 'Buyer'),
	'civil_registrar' =>WT_I18N::translate_c('FEMALE', 'Civil Registrar'),
	'employee'        =>WT_I18N::translate_c('FEMALE', 'Employee'),
	'employer'        =>WT_I18N::translate_c('FEMALE', 'Employer'),
	'friend'          =>WT_I18N::translate_c('FEMALE', 'Friend'),
	'guardian'        =>WT_I18N::translate_c('FEMALE', 'Guardian'),
	'informant'       =>WT_I18N::translate_c('FEMALE', 'Informant'),
	'lodger'          =>WT_I18N::translate_c('FEMALE', 'Lodger'),
	'nurse'           =>WT_I18N::translate_c('FEMALE', 'Nurse'),
	'owner'           =>WT_I18N::translate_c('FEMALE', 'Owner'),
	'registry_officer'=>WT_I18N::translate_c('FEMALE', 'Registry Officer'),
	'seller'          =>WT_I18N::translate_c('FEMALE', 'Seller'),
	'servant'         =>WT_I18N::translate_c('FEMALE', 'Servant'),
	'slave'           =>WT_I18N::translate_c('FEMALE', 'Slave'),
	'ward'            =>WT_I18N::translate_c('FEMALE', 'Ward'),
);

// GEDCOM RELA codes for non-genealogical relationships.
// These aren't part of the standard, but we list the common ones here so we can translate them.
$RELA_CODES_M=array(
	'attendant'       =>WT_I18N::translate_c('MALE', 'Attendant'),
	'attending'       =>WT_I18N::translate_c('MALE', 'Attending'),
	'buyer'           =>WT_I18N::translate_c('MALE', 'Buyer'),
	'civil_registrar' =>WT_I18N::translate_c('MALE', 'Civil Registrar'),
	'employee'        =>WT_I18N::translate_c('MALE', 'Employee'),
	'employer'        =>WT_I18N::translate_c('MALE', 'Employer'),
	'friend'          =>WT_I18N::translate_c('MALE', 'Friend'),
	'guardian'        =>WT_I18N::translate_c('MALE', 'Guardian'),
	'informant'       =>WT_I18N::translate_c('MALE', 'Informant'),
	'lodger'          =>WT_I18N::translate_c('MALE', 'Lodger'),
	'nurse'           =>WT_I18N::translate_c('MALE', 'Nurse'),
	'owner'           =>WT_I18N::translate_c('MALE', 'Owner'),
	'registry_officer'=>WT_I18N::translate_c('MALE', 'Registry Officer'),
	'seller'          =>WT_I18N::translate_c('MALE', 'Seller'),
	'servant'         =>WT_I18N::translate_c('MALE', 'Servant'),
	'slave'           =>WT_I18N::translate_c('MALE', 'Slave'),
	'ward'            =>WT_I18N::translate_c('MALE', 'Ward'),
);

// TEMP tags - LDS temple codes
$TEMPLE_CODES = array(
	'ABA'  =>WT_I18N::translate('Aba, Nigeria'),
	'ACCRA'=>WT_I18N::translate('Accra, Ghana'),
	'ADELA'=>WT_I18N::translate('Adelaide, Australia'),
	'ALBER'=>WT_I18N::translate('Cardston, Alberta, Canada'),
	'ALBUQ'=>WT_I18N::translate('Albuquerque, New Mexico'),
	'ANCHO'=>WT_I18N::translate('Anchorage, Alaska'),
	'ARIZO'=>WT_I18N::translate('Mesa, Arizona'),
	'ASUNC'=>WT_I18N::translate('Asuncion, Paraguay'),
	'ATLAN'=>WT_I18N::translate('Atlanta, Georgia'),
	'BAIRE'=>WT_I18N::translate('Buenos Aires, Argentina'),
	'BILLI'=>WT_I18N::translate('Billings, Montana'),
	'BIRMI'=>WT_I18N::translate('Birmingham, Alabama'),
	'BISMA'=>WT_I18N::translate('Bismarck, North Dakota'),
	'BOGOT'=>WT_I18N::translate('Bogota, Colombia'),
	'BOISE'=>WT_I18N::translate('Boise, Idaho'),
	'BOSTO'=>WT_I18N::translate('Boston, Massachusetts'),
	'BOUNT'=>WT_I18N::translate('Bountiful, Utah'),
	'BRISB'=>WT_I18N::translate('Brisbane, Australia'),
	'BROUG'=>WT_I18N::translate('Baton Rouge, Louisiana'),
	'CAMPI'=>WT_I18N::translate('Campinas, Brazil'),
	'CARAC'=>WT_I18N::translate('Caracas, Venezuela'),
	'CHICA'=>WT_I18N::translate('Chicago, Illinois'),
	'CIUJU'=>WT_I18N::translate('Ciudad Juarez, Mexico'),
	'COCHA'=>WT_I18N::translate('Cochabamba, Bolivia'),
	'COLJU'=>WT_I18N::translate('Colonia Juarez, Mexico'),
	'COLSC'=>WT_I18N::translate('Columbia, South Carolina'),
	'COLUM'=>WT_I18N::translate('Columbus, Ohio'),
	'COPEN'=>WT_I18N::translate('Copenhagen, Denmark'),
	'CRIVE'=>WT_I18N::translate('Columbia River, Washington'),
	'DALLA'=>WT_I18N::translate('Dallas, Texas'),
	'DENVE'=>WT_I18N::translate('Denver, Colorado'),
	'DETRO'=>WT_I18N::translate('Detroit, Michigan'),
	'EDMON'=>WT_I18N::translate('Edmonton, Alberta, Canada'),
	'EHOUS'=> /* I18N: http://en.wikipedia.org/wiki/Endowment_house */ WT_I18N::translate('Endowment House'),
	'FRANK'=>WT_I18N::translate('Frankfurt am Main, Germany'),
	'FREIB'=>WT_I18N::translate('Freiburg, Germany'),
	'FRESN'=>WT_I18N::translate('Fresno, California'),
	'FUKUO'=>WT_I18N::translate('Fukuoka, Japan'),
	'GUADA'=>WT_I18N::translate('Guadalajara, Mexico'),
	'GUATE'=>WT_I18N::translate('Guatemala City, Guatemala'),
	'GUAYA'=>WT_I18N::translate('Guayaquil, Ecuador'),
	'HAGUE'=>WT_I18N::translate('The Hague, Netherlands'),
	'HALIF'=>WT_I18N::translate('Halifax, Nova Scotia, Canada'),
	'HARTF'=>WT_I18N::translate('Hartford, Connecticut'),
	'HAWAI'=>WT_I18N::translate('Laie, Hawaii'),
	'HELSI'=>WT_I18N::translate('Helsinki, Finland'),
	'HERMO'=>WT_I18N::translate('Hermosillo, Mexico'),
	'HKONG'=>WT_I18N::translate('Hong Kong'),
	'HOUST'=>WT_I18N::translate('Houston, Texas'),
	'IFALL'=>WT_I18N::translate('Idaho Falls, Idaho'),
	'JOHAN'=>WT_I18N::translate('Johannesburg, South Africa'),
	'JRIVE'=>WT_I18N::translate('Jordan River, Utah'),
	'KIEV' =>WT_I18N::translate('Kiev, Ukraine'),
	'KONA' =>WT_I18N::translate('Kona, Hawaii'),
	'LANGE'=>WT_I18N::translate('Los Angeles, California'),
	'LIMA' =>WT_I18N::translate('Lima, Peru'),
	'LOGAN'=>WT_I18N::translate('Logan, Utah'),
	'LONDO'=>WT_I18N::translate('London, England'),
	'LOUIS'=>WT_I18N::translate('Louisville, Kentucky'),
	'LUBBO'=>WT_I18N::translate('Lubbock, Texas'),
	'LVEGA'=>WT_I18N::translate('Las Vegas, Nevada'),
	'MADRI'=>WT_I18N::translate('Madrid, Spain'),
	'MANIL'=>WT_I18N::translate('Manila, Philippines'),
	'MANTI'=>WT_I18N::translate('Manti, Utah'),
	'MEDFO'=>WT_I18N::translate('Medford, Oregon'),
	'MELBO'=>WT_I18N::translate('Melbourne, Australia'),
	'MEMPH'=>WT_I18N::translate('Memphis, Tennessee'),
	'MERID'=>WT_I18N::translate('Merida, Mexico'),
	'MEXIC'=>WT_I18N::translate('Mexico City, Mexico'),
	'MNTVD'=>WT_I18N::translate('Montevideo, Uruguay'),
	'MONTE'=>WT_I18N::translate('Monterrey, Mexico'),
	'MONTI'=>WT_I18N::translate('Monticello, Utah'),
	'MONTR'=>WT_I18N::translate('Montreal, Quebec, Canada'),
	'MTIMP'=>WT_I18N::translate('Mt. Timpanogos, Utah'),
	'NASHV'=>WT_I18N::translate('Nashville, Tennessee'),
	'NAUV2'=>WT_I18N::translate('Nauvoo, Illinois (new)'),
	'NAUVO'=>WT_I18N::translate('Nauvoo, Illinois (original)'),
	'NBEAC'=>WT_I18N::translate('Newport Beach, California'),
	'NUKUA'=>WT_I18N::translate('Nuku\'Alofa, Tonga'),
	'NYORK'=>WT_I18N::translate('New York, New York'),
	'NZEAL'=>WT_I18N::translate('Hamilton, New Zealand'),
	'OAKLA'=>WT_I18N::translate('Oakland, California'),
	'OAXAC'=>WT_I18N::translate('Oaxaca, Mexico'),
	'OGDEN'=>WT_I18N::translate('Ogden, Utah'),
	'OKLAH'=>WT_I18N::translate('Oklahoma City, Oklahoma'),
	'ORLAN'=>WT_I18N::translate('Orlando, Florida'),
	'PALEG'=>WT_I18N::translate('Porto Alegre, Brazil'),
	'PALMY'=>WT_I18N::translate('Palmyra, New York'),
	'PAPEE'=>WT_I18N::translate('Papeete, Tahiti'),
	'PERTH'=>WT_I18N::translate('Perth, Australia'),
	'POFFI'=> /* I18N: http://en.wikipedia.org/wiki/President_of_the_Church */ WT_I18N::translate('President\'s Office'),
	'PORTL'=>WT_I18N::translate('Portland, Oregon'),
	'PREST'=>WT_I18N::translate('Preston, England'),
	'PROVO'=>WT_I18N::translate('Provo, Utah'),
	'RALEI'=>WT_I18N::translate('Raleigh, North Carolina'),
	'RECIF'=>WT_I18N::translate('Recife, Brazil'),
	'REDLA'=>WT_I18N::translate('Redlands, California'),
	'REGIN'=>WT_I18N::translate('Regina, Saskatchewan, Canada'),
	'RENO' =>WT_I18N::translate('Reno, Nevada'),
	'SACRA'=>WT_I18N::translate('Sacramento, California'),
	'SAMOA'=>WT_I18N::translate('Apia, Samoa'),
	'SANTI'=>WT_I18N::translate('Santiago, Chile'),
	'SANTO'=>WT_I18N::translate('San Antonio, Texas'),
	'SDIEG'=>WT_I18N::translate('San Diego, California'),
	'SDOMI'=>WT_I18N::translate('Santo Domingo, Dom. Rep.'),
	'SEATT'=>WT_I18N::translate('Seattle, Washington'),
	'SEOUL'=>WT_I18N::translate('Seoul, Korea'),
	'SGEOR'=>WT_I18N::translate('St. George, Utah'),
	'SJOSE'=>WT_I18N::translate('San Jose, Costa Rica'),
	'SLAKE'=>WT_I18N::translate('Salt Lake City, Utah'),
	'SLOUI'=>WT_I18N::translate('St. Louis, Missouri'),
	'SNOWF'=>WT_I18N::translate('Snowflake, Arizona'),
	'SPAUL'=>WT_I18N::translate('Sao Paulo, Brazil'),
	'SPMIN'=>WT_I18N::translate('St. Paul, Minnesota'),
	'SPOKA'=>WT_I18N::translate('Spokane, Washington'),
	'STOCK'=>WT_I18N::translate('Stockholm, Sweden'),
	'SUVA' =>WT_I18N::translate('Suva, Fiji'),
	'SWISS'=>WT_I18N::translate('Bern, Switzerland'),
	'SYDNE'=>WT_I18N::translate('Sydney, Australia'),
	'TAIPE'=>WT_I18N::translate('Taipei, Taiwan'),
	'TAMPI'=>WT_I18N::translate('Tampico, Mexico'),
	'TGUTI'=>WT_I18N::translate('Tuxtla Gutierrez, Mexico'),
	'TOKYO'=>WT_I18N::translate('Tokyo, Japan'),
	'TORNO'=>WT_I18N::translate('Toronto, Ontario, Canada'),
	'VERAC'=>WT_I18N::translate('Veracruz, Mexico'),
	'VERNA'=>WT_I18N::translate('Vernal, Utah'),
	'VILLA'=>WT_I18N::translate('Villa Hermosa, Mexico'),
	'WASHI'=>WT_I18N::translate('Washington, DC'),
	'WINTE'=>WT_I18N::translate('Winter Quarters, Nebraska'),
);

// STAT tags - LDS status codes
$STATUS_CODES = array(
	'BIC'      => /* LDS sealing statuses; http://en.wikipedia.org/wiki/Sealing_(Latter_Day_Saints) */ WT_I18N::translate('Born in the covenant'),
	'CANCELLED'=>WT_I18N::translate('Sealing cancelled (divorce)'),
	'CHILD'    =>WT_I18N::translate('Died as a child: exempt'),
	'CLEARED'  =>WT_I18N::translate('Cleared but not yet completed'),
	'COMPLETED'=>WT_I18N::translate('Completed; date unknown'),
	'DNS'      =>WT_I18N::translate('Do Not Seal: unauthorized'),
	'DNS/CAN'  =>WT_I18N::translate('Do Not Seal, previous sealing cancelled'),
	'INFANT'   =>WT_I18N::translate('Died as an infant: exempt'),
	'PRE-1970' =>WT_I18N::translate('Completed before 1970; date not available'),
	'STILLBORN'=>WT_I18N::translate('Stillborn: exempt'),
	'SUBMITTED'=>WT_I18N::translate('Submitted but not yet cleared'),
	'UNCLEARED'=>WT_I18N::translate('Uncleared: insufficient data'),
);

// NPFX tags - name prefixes
$NPFX_accept=array(
	'Adm',
	'Amb',
	'Brig',
	'Can',
	'Capt',
	'Chan',
	'Chapln',
	'Cmdr',
	'Col',
	'Cpl',
	'Cpt',
	'Dr',
	'Gen',
	'Gov',
	'Hon',
	'Lady',
	'Lt',
	'Mr',
	'Mrs',
	'Ms',
	'Msgr',
	'Pfc',
	'Pres',
	'Prof',
	'Pvt',
	'Rabbi',
	'Rep',
	'Rev',
	'Sen',
	'Sgt',
	'Sir',
	'Sr',
	'Sra',
	'Srta',
	'Ven',
);

// SPFX tags - surname prefixes
$SPFX_accept=array(
	'al',
	'da',
	'de',
	'dem',
	'den',
	'der',
	'di',
	'du',
	'el',
	'la',
	'van',
	'von',
);

// NSFX tags - name suffixes
$NSFX_accept=array(
	'I',
	'II',
	'III',
	'IV',
	'Jr',
	'Junior',
	'MD',
	'PhD',
	'Senior',
	'Sr',
	'V',
	'VI',
);

// FILE:FORM tags - file formats
$FILE_FORM_accept=array(
	'avi',
	'bmp',
	'gif',
	'jpeg',
	'mp3',
	'ole',
	'pcx',
	'png',
	'tiff',
	'wav',
);

// Fact tags (as opposed to event tags), that don't normally have a value
$emptyfacts=array(
	'ADOP',
	'ANUL',
	'BAPL',
	'BAPM',
	'BARM',
	'BASM',
	'BIRT',
	'BLES',
	'BURI',
	'CENS',
	'CHAN',
	'CHR',
	'CHRA',
	'CONF',
	'CONL',
	'CREM',
	'DATA',
	'DEAT',
	'DIV',
	'DIVF',
	'EMIG',
	'ENDL',
	'ENGA',
	'FCOM',
	'GRAD',
	'HUSB',
	'IMMI',
	'MAP',
	'MARB',
	'MARC',
	'MARL',
	'MARR',
	'MARS',
	'NATU',
	'ORDN',
	'PROB',
	'RESI',
	'RETI',
	'SLGC',
	'SLGS',
	'WIFE',
	'WILL',
	'_HOL',
	'_NMR',
	'_SEPR',
);

// Tags that require a TEMP subtag
$templefacts=array(
	'BAPL',
	'CONL',
	'ENDL',
	'SLGC',
	'SLGS',
);

// Tags that don't require a PLAC subtag
$nonplacfacts=array(
	'ENDL',
	'NCHI',
	'SLGC',
	'SLGS',
);

// Tags that don't require a DATE subtag
$nondatefacts=array(
	'ABBR',
	'ADDR',
	'AFN',
	'AUTH',
	'CHIL',
	'EMAIL',
	'FAX',
	'HUSB',
	'NAME',
	'NCHI',
	'NOTE',
	'OBJE',
	'PHON',
	'PUBL',
	'REFN',
	'REPO',
	'RESN',
	'SEX',
	'SOUR',
	'SSN',
	'TEXT',
	'TITL',
	'WIFE',
	'WWW',
	'_EMAIL',
);

// Tags that require a TYPE subtag
$typefacts=array(
);

// Tags that require a DATE:TIME as well as a DATE
$date_and_time=array(
	'BIRT',
	'DEAT',
);

// Level 2 tags that apply to specific Level 1 tags
// Tags are applied in the order they appear here.
$level2_tags=array(
	'_HEB'=>array(
		'NAME',
		'TITL',
	),
	'ROMN'=>array(
		'NAME',
		'TITL',
	),
	'TYPE'=>array(
		'EVEN',
		'FACT',
		'GRAD',
		'IDNO',
		'MARR',
		'ORDN',
		'SSN',
	),
	'AGNC'=>array(
		'EDUC',
		'GRAD',
		'OCCU',
		'ORDN',
		'RETI',
	),
	'CAUS'=>array(
		'DEAT',
	),
	'CALN'=>array(
		'REPO',
	),
	'CEME'=>array( // CEME is NOT a valid 5.5.1 tag
		'BURI',
	),
	'RELA'=>array(
		'ASSO',
	),
	'DATE'=>array(
		'ADOP',
		'ANUL',
		'BAPL',
		'BAPM',
		'BARM',
		'BASM',
		'BIRT',
		'BLES',
		'BURI',
		'CENS',
		'CENS',
		'CHR',
		'CHRA',
		'CONF',
		'CONL',
		'CREM',
		'DEAT',
		'DIV',
		'DIVF',
		'EDUC',
		'EMIG',
		'ENDL',
		'ENGA',
		'EVEN',
		'EVEN',
		'FCOM',
		'GRAD',
		'IMMI',
		'MARB',
		'MARC',
		'MARL',
		'MARR',
		'MARS',
		'NATU',
		'OCCU',
		'ORDN',
		'PROB',
		'PROP',
		'RELI',
		'RESI',
		'RESI',
		'RETI',
		'SLGC',
		'SLGS',
		'WILL',
		'_TODO',
	),
	'TEMP'=>array(
		'BAPL',
		'CONL',
		'ENDL',
		'SLGC',
		'SLGS',
	),
	'PLAC'=>array(
		'ADOP',
		'ANUL',
		'BAPL',
		'BAPM',
		'BARM',
		'BASM',
		'BIRT',
		'BLES',
		'BURI',
		'CENS',
		'CENS',
		'CHR',
		'CHRA',
		'CONF',
		'CONL',
		'CREM',
		'DEAT',
		'DIV',
		'DIVF',
		'EDUC',
		'EMIG',
		'ENDL',
		'ENGA',
		'EVEN',
		'EVEN',
		'FCOM',
		'GRAD',
		'IMMI',
		'MARB',
		'MARC',
		'MARL',
		'MARR',
		'MARS',
		'NATU',
		'OCCU',
		'ORDN',
		'PROB',
		'PROP',
		'RELI',
		'RESI',
		'RESI',
		'RETI',
		'SLGC',
		'SLGS',
		'SSN',
		'WILL',
	),
	'STAT'=>array(
		'BAPL',
		'CONL',
		'ENDL',
		'SLGC',
		'SLGS',
	),
	'ADDR'=>array(
		'BIRT',
		'BURI',
		'CENS',
		'CHR',
		'CHRA',
		'CREM',
		'DEAT',
		'EDUC',
		'EVEN',
		'GRAD',
		'MARR',
		'OCCU',
		'ORDN',
		'PROP',
		'RESI',
	),
	'PHON'=>array(
		'OCCU',
		'RESI',
	),
	'FAX'=>array(
		'OCCU',
		'RESI',
	),
	'URL'=>array(
		'OCCU',
		'RESI',
	),
	'EMAIL'=>array(
		'OCCU',
		'RESI',
	),
	'AGE'=>array(
		'CENS',
		'DEAT',
	),
	'HUSB'=>array(
		'MARR',
	),
	'WIFE'=>array(
		'MARR',
	),
	'FAMC'=>array(
		'ADOP',
		'SLGC',
	),
	'FILE'=>array(
		'OBJE',
	),
	'_PRIM'=>array(
		'OBJE',
	),
	'EVEN'=>array(
		'DATA',
	),
	'_WT_USER'=>array(
		'_TODO',
	),
);

// The order of name parts, when generating names
$STANDARD_NAME_FACTS=array('NAME', 'NPFX', 'GIVN', 'SPFX', 'SURN', 'NSFX');
$REVERSED_NAME_FACTS=array('NAME', 'NPFX', 'SPFX', 'SURN', 'GIVN', 'NSFX');

// ISO3166 3 letter codes, with their 2 letter equivalent.
// NOTE: this is not 1:1.  ENG/SCO/WAL/NIR => GB
// NOTE: this also includes champman codes and others.  Should it?
$iso3166=array(
	'ABW'=>'AW', 'AFG'=>'AF', 'AGO'=>'AO', 'AIA'=>'AI', 'ALA'=>'AX', 'ALB'=>'AL', 'AND'=>'AD', 'ANT'=>'AN',
	'ARE'=>'AE', 'ARG'=>'AR', 'ARM'=>'AM', 'ASM'=>'AS', 'ATA'=>'AQ', 'ATF'=>'TF', 'ATG'=>'AG', 'AUS'=>'AU',
	'AUT'=>'AT', 'AZE'=>'AZ', 'BDI'=>'BI', 'BEL'=>'BE', 'BEN'=>'BJ', 'BFA'=>'BF', 'BGD'=>'BD', 'BGR'=>'BG',
	'BHR'=>'BH', 'BHS'=>'BS', 'BIH'=>'BA', 'BLR'=>'BY', 'BLZ'=>'BZ', 'BMU'=>'BM', 'BOL'=>'BO', 'BRA'=>'BR',
	'BRB'=>'BB', 'BRN'=>'BN', 'BTN'=>'BT', 'BVT'=>'BV', 'BWA'=>'BW', 'CAF'=>'CF', 'CAN'=>'CA', 'CCK'=>'CC',
	'CHE'=>'CH', 'CHL'=>'CL', 'CHN'=>'CN', 'CHI'=>'JE', 'CIV'=>'CI', 'CMR'=>'CM', 'COD'=>'CD', 'COG'=>'CG',
	'COK'=>'CK', 'COL'=>'CO', 'COM'=>'KM', 'CPV'=>'CV', 'CRI'=>'CR', 'CUB'=>'CU', 'CXR'=>'CX', 'CYM'=>'KY',
	'CYP'=>'CY', 'CZE'=>'CZ', 'DEU'=>'DE', 'DJI'=>'DJ', 'DMA'=>'DM', 'DNK'=>'DK', 'DOM'=>'DO', 'DZA'=>'DZ',
	'ECU'=>'EC', 'EGY'=>'EG', 'ENG'=>'GB', 'ERI'=>'ER', 'ESH'=>'EH', 'ESP'=>'ES', 'EST'=>'EE', 'ETH'=>'ET',
	'FIN'=>'FI', 'FJI'=>'FJ', 'FLK'=>'FK', 'FRA'=>'FR', 'FRO'=>'FO', 'FSM'=>'FM', 'GAB'=>'GA', 'GBR'=>'GB',
	'GEO'=>'GE', 'GHA'=>'GH', 'GIB'=>'GI', 'GIN'=>'GN', 'GLP'=>'GP', 'GMB'=>'GM', 'GNB'=>'GW', 'GNQ'=>'GQ',
	'GRC'=>'GR', 'GRD'=>'GD', 'GRL'=>'GL', 'GTM'=>'GT', 'GUF'=>'GF', 'GUM'=>'GU', 'GUY'=>'GY', 'HKG'=>'HK',
	'HMD'=>'HM', 'HND'=>'HN', 'HRV'=>'HR', 'HTI'=>'HT', 'HUN'=>'HU', 'IDN'=>'ID', 'IND'=>'IN', 'IOT'=>'IO',
	'IRL'=>'IE', 'IRN'=>'IR', 'IRQ'=>'IQ', 'ISL'=>'IS', 'ISR'=>'IL', 'ITA'=>'IT', 'JAM'=>'JM', 'JOR'=>'JO',
	'JPN'=>'JA', 'KAZ'=>'KZ', 'KEN'=>'KE', 'KGZ'=>'KG', 'KHM'=>'KH', 'KIR'=>'KI', 'KNA'=>'KN', 'KOR'=>'KO',
	'KWT'=>'KW', 'LAO'=>'LA', 'LBN'=>'LB', 'LBR'=>'LR', 'LBY'=>'LY', 'LCA'=>'LC', 'LIE'=>'LI', 'LKA'=>'LK',
	'LSO'=>'LS', 'LTU'=>'LT', 'LUX'=>'LU', 'LVA'=>'LV', 'MAC'=>'MO', 'MAR'=>'MA', 'MCO'=>'MC', 'MDA'=>'MD',
	'MDG'=>'MG', 'MDV'=>'MV', 'MEX'=>'MX', 'MHL'=>'MH', 'MKD'=>'MK', 'MLI'=>'ML', 'MLT'=>'MT', 'MMR'=>'MM',
	'MNG'=>'MN', 'MNP'=>'MP', 'MNT'=>'ME', 'MOZ'=>'MZ', 'MRT'=>'MR', 'MSR'=>'MS', 'MTQ'=>'MQ', 'MUS'=>'MU',
	'MWI'=>'MW', 'MYS'=>'MY', 'MYT'=>'YT', 'NAM'=>'NA', 'NCL'=>'NC', 'NER'=>'NE', 'NFK'=>'NF', 'NGA'=>'NG',
	'NIC'=>'NI', 'NIR'=>'GB', 'NIU'=>'NU', 'NLD'=>'NL', 'NOR'=>'NO', 'NPL'=>'NP', 'NRU'=>'NR', 'NZL'=>'NZ',
	'OMN'=>'OM', 'PAK'=>'PK', 'PAN'=>'PA', 'PCN'=>'PN', 'PER'=>'PE', 'PHL'=>'PH', 'PLW'=>'PW', 'PNG'=>'PG',
	'POL'=>'PL', 'PRI'=>'PR', 'PRK'=>'KP', 'PRT'=>'PO', 'PRY'=>'PY', 'PSE'=>'PS', 'PYF'=>'PF', 'QAT'=>'QA',
	'REU'=>'RE', 'ROM'=>'RO', 'RUS'=>'RU', 'RWA'=>'RW', 'SAU'=>'SA', 'SCT'=>'GB', 'SDN'=>'SD', 'SEN'=>'SN',
	'SER'=>'RS', 'SGP'=>'SG', 'SGS'=>'GS', 'SHN'=>'SH', 'SIC'=>'IT', 'SJM'=>'SJ', 'SLB'=>'SB', 'SLE'=>'SL',
	'SLV'=>'SV', 'SMR'=>'SM', 'SOM'=>'SO', 'SPM'=>'PM', 'STP'=>'ST', 'SUN'=>'RU', 'SUR'=>'SR', 'SVK'=>'SK',
	'SVN'=>'SI', 'SWE'=>'SE', 'SWZ'=>'SZ', 'SYC'=>'SC', 'SYR'=>'SY', 'TCA'=>'TC', 'TCD'=>'TD', 'TGO'=>'TG',
	'THA'=>'TH', 'TJK'=>'TJ', 'TKL'=>'TK', 'TKM'=>'TM', 'TLS'=>'TL', 'TON'=>'TO', 'TTO'=>'TT', 'TUN'=>'TN',
	'TUR'=>'TR', 'TUV'=>'TV', 'TWN'=>'TW', 'TZA'=>'TZ', 'UGA'=>'UG', 'UKR'=>'UA', 'UMI'=>'UM', 'URY'=>'UY',
	'USA'=>'US', 'UZB'=>'UZ', 'VAT'=>'VA', 'VCT'=>'VC', 'VEN'=>'VE', 'VGB'=>'VG', 'VIR'=>'VI', 'VNM'=>'VN',
	'VUT'=>'VU', 'WLF'=>'WF', 'WLS'=>'GB', 'WSM'=>'WS', 'YEM'=>'YE', 'ZAF'=>'ZA', 'ZMB'=>'ZM', 'ZWE'=>'ZW',
);

function get_all_countries() {
	return array(
		'???'=>WT_I18N::translate('Unknown'),
		'ABW'=>WT_I18N::translate('Aruba'),
		'ACA'=>WT_I18N::translate('Acadia'),
		'AFG'=>WT_I18N::translate('Afghanistan'),
		'AGO'=>WT_I18N::translate('Angola'),
		'AIA'=>WT_I18N::translate('Anguilla'),
		'ALA'=>WT_I18N::translate('Aland Islands'),
		'ALB'=>WT_I18N::translate('Albania'),
		'AND'=>WT_I18N::translate('Andorra'),
		'ANT'=>WT_I18N::translate('Netherlands Antilles'),
		'ARE'=>WT_I18N::translate('United Arab Emirates'),
		'ARG'=>WT_I18N::translate('Argentina'),
		'ARM'=>WT_I18N::translate('Armenia'),
		'ASM'=>WT_I18N::translate('American Samoa'),
		'ATA'=>WT_I18N::translate('Antarctica'),
		'ATF'=>WT_I18N::translate('French Southern Territories'),
		'ATG'=>WT_I18N::translate('Antigua and Barbuda'),
		'AUS'=>WT_I18N::translate('Australia'),
		'AUT'=>WT_I18N::translate('Austria'),
		'AZE'=>WT_I18N::translate('Azerbaijan'),
		'AZR'=>WT_I18N::translate('Azores'),
		'BDI'=>WT_I18N::translate('Burundi'),
		'BEL'=>WT_I18N::translate('Belgium'),
		'BEN'=>WT_I18N::translate('Benin'),
		'BFA'=>WT_I18N::translate('Burkina Faso'),
		'BGD'=>WT_I18N::translate('Bangladesh'),
		'BGR'=>WT_I18N::translate('Bulgaria'),
		'BHR'=>WT_I18N::translate('Bahrain'),
		'BHS'=>WT_I18N::translate('Bahamas'),
		'BIH'=>WT_I18N::translate('Bosnia and Herzegovina'),
		'BLR'=>WT_I18N::translate('Belarus'),
		'BLZ'=>WT_I18N::translate('Belize'),
		'BMU'=>WT_I18N::translate('Bermuda'),
		'BOL'=>WT_I18N::translate('Bolivia'),
		'BRA'=>WT_I18N::translate('Brazil'),
		'BRB'=>WT_I18N::translate('Barbados'),
		'BRN'=>WT_I18N::translate('Brunei Darussalam'),
		'BTN'=>WT_I18N::translate('Bhutan'),
		'BVT'=>WT_I18N::translate('Bouvet Island'),
		'BWA'=>WT_I18N::translate('Botswana'),
		'BWI'=>WT_I18N::translate('British West Indies'),
		'CAF'=>WT_I18N::translate('Central African Republic'),
		'CAN'=>WT_I18N::translate('Canada'),
		'CAP'=>WT_I18N::translate('Cape Colony'),
		'CAT'=>WT_I18N::translate('Catalonia'),
		'CCK'=>WT_I18N::translate('Cocos (Keeling) Islands'),
		'CHE'=>WT_I18N::translate('Switzerland'),
		'CHI'=>WT_I18N::translate('Channel Islands'),
		'CHL'=>WT_I18N::translate('Chile'),
		'CHN'=>WT_I18N::translate('China'),
		'CIV'=>WT_I18N::translate('Cote d\'Ivoire'),
		'CMR'=>WT_I18N::translate('Cameroon'),
		'COD'=>WT_I18N::translate('Congo (Kinshasa)'),
		'COG'=>WT_I18N::translate('Congo (Brazzaville)'),
		'COK'=>WT_I18N::translate('Cook Islands'),
		'COL'=>WT_I18N::translate('Colombia'),
		'COM'=>WT_I18N::translate('Comoros'),
		'CPV'=>WT_I18N::translate('Cape Verde'),
		'CRI'=>WT_I18N::translate('Costa Rica'),
		'CSK'=>WT_I18N::translate('Czechoslovakia'),
		'CUB'=>WT_I18N::translate('Cuba'),
		'CXR'=>WT_I18N::translate('Christmas Island'),
		'CYM'=>WT_I18N::translate('Cayman Islands'),
		'CYP'=>WT_I18N::translate('Cyprus'),
		'CZE'=>WT_I18N::translate('Czech Republic'),
		'DEU'=>WT_I18N::translate('Germany'),
		'DJI'=>WT_I18N::translate('Djibouti'),
		'DMA'=>WT_I18N::translate('Dominica'),
		'DNK'=>WT_I18N::translate('Denmark'),
		'DOM'=>WT_I18N::translate('Dominican Republic'),
		'DZA'=>WT_I18N::translate('Algeria'),
		'ECU'=>WT_I18N::translate('Ecuador'),
		'EGY'=>WT_I18N::translate('Egypt'),
		'EIR'=>WT_I18N::translate('Eire'),
		'ENG'=>WT_I18N::translate('England'),
		'ERI'=>WT_I18N::translate('Eritrea'),
		'ESH'=>WT_I18N::translate('Western Sahara'),
		'ESP'=>WT_I18N::translate('Spain'),
		'EST'=>WT_I18N::translate('Estonia'),
		'ETH'=>WT_I18N::translate('Ethiopia'),
		'FIN'=>WT_I18N::translate('Finland'),
		'FJI'=>WT_I18N::translate('Fiji'),
		'FLD'=>WT_I18N::translate('Flanders'),
		'FLK'=>WT_I18N::translate('Falkland Islands'),
		'FRA'=>WT_I18N::translate('France'),
		'FRO'=>WT_I18N::translate('Faeroe Islands'),
		'FSM'=>WT_I18N::translate('Micronesia'),
		'GAB'=>WT_I18N::translate('Gabon'),
		'GBR'=>WT_I18N::translate('United Kingdom'),
		'GEO'=>WT_I18N::translate('Georgia'),
		'GGY'=>WT_I18N::translate('Guernsey'),
		'GHA'=>WT_I18N::translate('Ghana'),
		'GIB'=>WT_I18N::translate('Gibraltar'),
		'GIN'=>WT_I18N::translate('Guinea'),
		'GLP'=>WT_I18N::translate('Guadeloupe'),
		'GMB'=>WT_I18N::translate('Gambia'),
		'GNB'=>WT_I18N::translate('Guinea-Bissau'),
		'GNQ'=>WT_I18N::translate('Equatorial Guinea'),
		'GRC'=>WT_I18N::translate('Greece'),
		'GRD'=>WT_I18N::translate('Grenada'),
		'GRL'=>WT_I18N::translate('Greenland'),
		'GTM'=>WT_I18N::translate('Guatemala'),
		'GUF'=>WT_I18N::translate('French Guiana'),
		'GUM'=>WT_I18N::translate('Guam'),
		'GUY'=>WT_I18N::translate('Guyana'),
		'HKG'=>WT_I18N::translate('Hong Kong'),
		'HMD'=>WT_I18N::translate('Heard Island and McDonald Islands'),
		'HND'=>WT_I18N::translate('Honduras'),
		'HRV'=>WT_I18N::translate('Croatia'),
		'HTI'=>WT_I18N::translate('Haiti'),
		'HUN'=>WT_I18N::translate('Hungary'),
		'IDN'=>WT_I18N::translate('Indonesia'),
		'IND'=>WT_I18N::translate('India'),
		'IOM'=>WT_I18N::translate('Isle of Man'),
		'IOT'=>WT_I18N::translate('British Indian Ocean Territory'),
		'IRL'=>WT_I18N::translate('Ireland'),
		'IRN'=>WT_I18N::translate('Iran'),
		'IRQ'=>WT_I18N::translate('Iraq'),
		'ISL'=>WT_I18N::translate('Iceland'),
		'ISR'=>WT_I18N::translate('Israel'),
		'ITA'=>WT_I18N::translate('Italy'),
		'JAM'=>WT_I18N::translate('Jamaica'),
		'JOR'=>WT_I18N::translate('Jordan'),
		'JPN'=>WT_I18N::translate('Japan'),
		'KAZ'=>WT_I18N::translate('Kazakhstan'),
		'KEN'=>WT_I18N::translate('Kenya'),
		'KGZ'=>WT_I18N::translate('Kyrgyzstan'),
		'KHM'=>WT_I18N::translate('Cambodia'),
		'KIR'=>WT_I18N::translate('Kiribati'),
		'KNA'=>WT_I18N::translate('Saint Kitts and Nevis'),
		'KOR'=>WT_I18N::translate('Korea'),
		'KWT'=>WT_I18N::translate('Kuwait'),
		'LAO'=>WT_I18N::translate('Laos'),
		'LBN'=>WT_I18N::translate('Lebanon'),
		'LBR'=>WT_I18N::translate('Liberia'),
		'LBY'=>WT_I18N::translate('Libya'),
		'LCA'=>WT_I18N::translate('Saint Lucia'),
		'LIE'=>WT_I18N::translate('Liechtenstein'),
		'LKA'=>WT_I18N::translate('Sri Lanka'),
		'LSO'=>WT_I18N::translate('Lesotho'),
		'LTU'=>WT_I18N::translate('Lithuania'),
		'LUX'=>WT_I18N::translate('Luxembourg'),
		'LVA'=>WT_I18N::translate('Latvia'),
		'MAC'=>WT_I18N::translate('Macau'),
		'MAR'=>WT_I18N::translate('Morocco'),
		'MCO'=>WT_I18N::translate('Monaco'),
		'MDA'=>WT_I18N::translate('Moldova'),
		'MDG'=>WT_I18N::translate('Madagascar'),
		'MDV'=>WT_I18N::translate('Maldives'),
		'MEX'=>WT_I18N::translate('Mexico'),
		'MHL'=>WT_I18N::translate('Marshall Islands'),
		'MKD'=>WT_I18N::translate('Macedonia'),
		'MLI'=>WT_I18N::translate('Mali'),
		'MLT'=>WT_I18N::translate('Malta'),
		'MMR'=>WT_I18N::translate('Myanmar'),
		'MNG'=>WT_I18N::translate('Mongolia'),
		'MNP'=>WT_I18N::translate('Northern Mariana Islands'),
		'MNT'=>WT_I18N::translate('Montenegro'),
		'MOZ'=>WT_I18N::translate('Mozambique'),
		'MRT'=>WT_I18N::translate('Mauritania'),
		'MSR'=>WT_I18N::translate('Montserrat'),
		'MTQ'=>WT_I18N::translate('Martinique'),
		'MUS'=>WT_I18N::translate('Mauritius'),
		'MWI'=>WT_I18N::translate('Malawi'),
		'MYS'=>WT_I18N::translate('Malaysia'),
		'MYT'=>WT_I18N::translate('Mayotte'),
		'NAM'=>WT_I18N::translate('Namibia'),
		'NCL'=>WT_I18N::translate('New Caledonia'),
		'NER'=>WT_I18N::translate('Niger'),
		'NFK'=>WT_I18N::translate('Norfolk Island'),
		'NGA'=>WT_I18N::translate('Nigeria'),
		'NIC'=>WT_I18N::translate('Nicaragua'),
		'NIR'=>WT_I18N::translate('Northern Ireland'),
		'NIU'=>WT_I18N::translate('Niue'),
		'NLD'=>WT_I18N::translate('Netherlands'),
		'NOR'=>WT_I18N::translate('Norway'),
		'NPL'=>WT_I18N::translate('Nepal'),
		'NRU'=>WT_I18N::translate('Nauru'),
		'NTZ'=>WT_I18N::translate('Neutral Zone'),
		'NZL'=>WT_I18N::translate('New Zealand'),
		'OMN'=>WT_I18N::translate('Oman'),
		'PAK'=>WT_I18N::translate('Pakistan'),
		'PAN'=>WT_I18N::translate('Panama'),
		'PCN'=>WT_I18N::translate('Pitcairn'),
		'PER'=>WT_I18N::translate('Peru'),
		'PHL'=>WT_I18N::translate('Philippines'),
		'PLW'=>WT_I18N::translate('Palau'),
		'PNG'=>WT_I18N::translate('Papua New Guinea'),
		'POL'=>WT_I18N::translate('Poland'),
		'PRI'=>WT_I18N::translate('Puerto Rico'),
		'PRK'=>WT_I18N::translate('North Korea'),
		'PRT'=>WT_I18N::translate('Portugal'),
		'PRY'=>WT_I18N::translate('Paraguay'),
		'PSE'=>WT_I18N::translate('Occupied Palestinian Territory'),
		'PYF'=>WT_I18N::translate('French Polynesia'),
		'QAT'=>WT_I18N::translate('Qatar'),
		'REU'=>WT_I18N::translate('Reunion'),
		'ROM'=>WT_I18N::translate('Romania'),
		'RUS'=>WT_I18N::translate('Russia'),
		'RWA'=>WT_I18N::translate('Rwanda'),
		'SAU'=>WT_I18N::translate('Saudi Arabia'),
		'SCG'=>WT_I18N::translate('Serbia and Montenegro'),
		'SCT'=>WT_I18N::translate('Scotland'),
		'SDN'=>WT_I18N::translate('Sudan'),
		'SEA'=>WT_I18N::translate('At Sea'),
		'SEN'=>WT_I18N::translate('Senegal'),
		'SER'=>WT_I18N::translate('Serbia'),
		'SGP'=>WT_I18N::translate('Singapore'),
		'SGS'=>WT_I18N::translate('South Georgia and the South Sandwich Islands'),
		'SHN'=>WT_I18N::translate('Saint Helena'),
		'SIC'=>WT_I18N::translate('Sicily'),
		'SJM'=>WT_I18N::translate('Svalbard and Jan Mayen Islands'),
		'SLB'=>WT_I18N::translate('Solomon Islands'),
		'SLE'=>WT_I18N::translate('Sierra Leone'),
		'SLV'=>WT_I18N::translate('El Salvador'),
		'SMR'=>WT_I18N::translate('San Marino'),
		'SOM'=>WT_I18N::translate('Somalia'),
		'SPM'=>WT_I18N::translate('Saint Pierre and Miquelon'),
		'STP'=>WT_I18N::translate('Sao Tome and Principe'),
		'SUN'=>WT_I18N::translate('USSR'),
		'SUR'=>WT_I18N::translate('Suriname'),
		'SVK'=>WT_I18N::translate('Slovakia'),
		'SVN'=>WT_I18N::translate('Slovenia'),
		'SWE'=>WT_I18N::translate('Sweden'),
		'SWZ'=>WT_I18N::translate('Swaziland'),
		'SYC'=>WT_I18N::translate('Seychelles'),
		'SYR'=>WT_I18N::translate('Syrian Arab Republic'),
		'TCA'=>WT_I18N::translate('Turks and Caicos Islands'),
		'TCD'=>WT_I18N::translate('Chad'),
		'TGO'=>WT_I18N::translate('Togo'),
		'THA'=>WT_I18N::translate('Thailand'),
		'TJK'=>WT_I18N::translate('Tajikistan'),
		'TKL'=>WT_I18N::translate('Tokelau'),
		'TKM'=>WT_I18N::translate('Turkmenistan'),
		'TLS'=>WT_I18N::translate('Timor-Leste'),
		'TON'=>WT_I18N::translate('Tonga'),
		'TRN'=>WT_I18N::translate('Transylvania'),
		'TTO'=>WT_I18N::translate('Trinidad and Tobago'),
		'TUN'=>WT_I18N::translate('Tunisia'),
		'TUR'=>WT_I18N::translate('Turkey'),
		'TUV'=>WT_I18N::translate('Tuvalu'),
		'TWN'=>WT_I18N::translate('Taiwan'),
		'TZA'=>WT_I18N::translate('Tanzania'),
		'UGA'=>WT_I18N::translate('Uganda'),
		'UKR'=>WT_I18N::translate('Ukraine'),
		'UMI'=>WT_I18N::translate('US Minor Outlying Islands'),
		'URY'=>WT_I18N::translate('Uruguay'),
		'USA'=>WT_I18N::translate('USA'),
		'UZB'=>WT_I18N::translate('Uzbekistan'),
		'VAT'=>WT_I18N::translate('Vatican City'),
		'VCT'=>WT_I18N::translate('Saint Vincent and the Grenadines'),
		'VEN'=>WT_I18N::translate('Venezuela'),
		'VGB'=>WT_I18N::translate('British Virgin Islands'),
		'VIR'=>WT_I18N::translate('US Virgin Islands'),
		'VNM'=>WT_I18N::translate('Viet Nam'),
		'VUT'=>WT_I18N::translate('Vanuatu'),
		'WAF'=>WT_I18N::translate('West Africa'),
		'WLF'=>WT_I18N::translate('Wallis and Futuna Islands'),
		'WLS'=>WT_I18N::translate('Wales'),
		'WSM'=>WT_I18N::translate('Samoa'),
		'YEM'=>WT_I18N::translate('Yemen'),
		'YUG'=>WT_I18N::translate('Yugoslavia'),
		'ZAF'=>WT_I18N::translate('South Africa'),
		'ZAR'=>WT_I18N::translate('Zaire'),
		'ZMB'=>WT_I18N::translate('Zambia'),
		'ZWE'=>WT_I18N::translate('Zimbabwe'),
	);
}

$FACTS=array(
	'ABBR'=> /* I18N: gedcom tag ABBR */     WT_I18N::translate('Abbreviation'),
	'ADDR'=> /* I18N: gedcom tag ADDR */     WT_I18N::translate('Address'),
	'ADR1'=>                                 WT_I18N::translate('Address line 1'),
	'ADR2'=>                                 WT_I18N::translate('Address line 2'),
	'ADOP'=> /* I18N: gedcom tag ADOP */     WT_I18N::translate('Adoption'),
	'ADOP:DATE'=>                            WT_I18N::translate('Date of Adoption'),
	'ADOP:PLAC'=>                            WT_I18N::translate('Place of Adoption'),
	'ADOP:SOUR'=>                            WT_I18N::translate('Source for Adoption'),
	'AFN'=> /* I18N: gedcom tag AFN */       WT_I18N::translate('Ancestral File Number'),
	'AGE'=> /* I18N: gedcom tag AGE */       WT_I18N::translate('Age'),
	'AGNC'=> /* I18N: gedcom tag AGNC */     WT_I18N::translate('Agency'),
	'ALIA'=> /* I18N: gedcom tag ALIA */     WT_I18N::translate('Alias'),
	'ANCE'=> /* I18N: gedcom tag ANCE */     WT_I18N::translate('Generations of ancestors'),
	'ANCI'=> /* I18N: gedcom tag ANCI */     WT_I18N::translate('Ancestors interest'),
	'ANUL'=> /* I18N: gedcom tag ANUL */     WT_I18N::translate('Annulment'),
	'ASSO'=> /* I18N: gedcom tag ASSO */     WT_I18N::translate('Associate'),
	'AUTH'=> /* I18N: gedcom tag AUTH */     WT_I18N::translate('Author'),
	'BAPL'=> /* I18N: gedcom tag BAPL */     WT_I18N::translate('LDS baptism'),
	'BAPL:DATE'=>                            WT_I18N::translate('Date of LDS Baptism'),
	'BAPL:PLAC'=>                            WT_I18N::translate('Place of LDS Baptism'),
	'BAPL:TEMP'=>                            WT_I18N::translate('Temple of LDS Baptism'),
	'BAPM'=> /* I18N: gedcom tag BAPM */     WT_I18N::translate('Baptism'),
	'BAPM:DATE'=>                            WT_I18N::translate('Date of baptism'),
	'BAPM:PLAC'=>                            WT_I18N::translate('Place of baptism'),
	'BAPM:SOUR'=>                            WT_I18N::translate('Source for baptism'),
	'BARM'=> /* I18N: gedcom tag BARM */     WT_I18N::translate('Bar mitzvah'),
	'BARM:DATE'=>                            WT_I18N::translate('Date of bar mitzvah'),
	'BARM:PLAC'=>                            WT_I18N::translate('Place of bar mitzvah'),
	'BARM:SOUR'=>                            WT_I18N::translate('Source for bar mitzvah'),
	'BASM'=> /* I18N: gedcom tag BASM */     WT_I18N::translate('Bat mitzvah'),
	'BASM:DATE'=>                            WT_I18N::translate('Date of bat mitzvah'),
	'BASM:PLAC'=>                            WT_I18N::translate('Place of bat mitzvah'),
	'BASM:SOUR'=>                            WT_I18N::translate('Source for bat mitzvah'),
	'BIRT'=> /* I18N: gedcom tag BIRT */     WT_I18N::translate('Birth'),
	'BIRT:DATE'=>                            WT_I18N::translate('Date of birth'),
	'BIRT:PLAC'=>                            WT_I18N::translate('Place of birth'),
	'BIRT:SOUR'=>                            WT_I18N::translate('Source for birth'),
	'BLES'=> /* I18N: gedcom tag BLES */     WT_I18N::translate('Blessing'),
	'BLES:DATE'=>                            WT_I18N::translate('Date of Blessing'),
	'BLES:PLAC'=>                            WT_I18N::translate('Place of Blessing'),
	'BLES:SOUR'=>                            WT_I18N::translate('Source for Blessing'),
	'BLOB'=> /* I18N: gedcom tag BLOB */     WT_I18N::translate('Binary Data Object'),
	'BURI'=> /* I18N: gedcom tag BURI */     WT_I18N::translate('Burial'),
	'BURI:DATE'=>                            WT_I18N::translate('Date of burial'),
	'BURI:PLAC'=>                            WT_I18N::translate('Place of burial'),
	'BURI:SOUR'=>                            WT_I18N::translate('Source for burial'),
	'CALN'=> /* I18N: gedcom tag CALN */     WT_I18N::translate('Call number'),
	'CAST'=> /* I18N: gedcom tag CAST */     WT_I18N::translate('Caste'),
	'CAUS'=> /* I18N: gedcom tag CAUS */     WT_I18N::translate('Cause'),
	'CEME'=> /* I18N: gedcom tag CEME */     WT_I18N::translate('Cemetery'),
	'CENS'=> /* I18N: gedcom tag CENS */     WT_I18N::translate('Census'),
	'CENS:DATE'=>                            WT_I18N::translate('Census date'),
	'CENS:PLAC'=>                            WT_I18N::translate('Census place'),
	'CHAN'=> /* I18N: gedcom tag CHAN */     WT_I18N::translate('Last change'),
	'CHAR'=> /* I18N: gedcom tag CHAR */     WT_I18N::translate('Character set'),
	'CHIL'=> /* I18N: gedcom tag CHIL */     WT_I18N::translate('Child'),
	'CHR'=> /* I18N: gedcom tag CHR */       WT_I18N::translate('Christening'),
	'CHR:DATE'=>                             WT_I18N::translate('Date of christening'),
	'CHR:PLAC'=>                             WT_I18N::translate('Place of christening'),
	'CHR:SOUR'=>                             WT_I18N::translate('Source for christening'),
	'CHRA'=> /* I18N: gedcom tag CHRA */     WT_I18N::translate('Adult christening'),
	'CITN'=> /* I18N: gedcom tag CITN */     WT_I18N::translate('Citizenship'),
	'CITY'=> /* I18N: gedcom tag CITY */     WT_I18N::translate('City'),
	'COMM'=> /* I18N: gedcom tag COMM */     WT_I18N::translate('Comment'),
	'CONC'=> /* I18N: gedcom tag CONC */     WT_I18N::translate('Concatenation'),
	'CONT'=> /* I18N: gedcom tag CONT */     WT_I18N::translate('Continued'),
	'CONF'=> /* I18N: gedcom tag CONF */     WT_I18N::translate('Confirmation'),
	'CONF:DATE'=>                            WT_I18N::translate('Date of confirmation'),
	'CONF:PLAC'=>                            WT_I18N::translate('Place of confirmation'),
	'CONF:SOUR'=>                            WT_I18N::translate('Source for confirmation'),
	'CONL'=> /* I18N: gedcom tag CONL */     WT_I18N::translate('LDS confirmation'),
	'COPR'=> /* I18N: gedcom tag COPR */     WT_I18N::translate('Copyright'),
	'CORP'=> /* I18N: gedcom tag CORP */     WT_I18N::translate('Corporation'),
	'CREM'=> /* I18N: gedcom tag CREM */     WT_I18N::translate('Cremation'),
	'CREM:DATE'=>                            WT_I18N::translate('Date of Cremation'),
	'CREM:PLAC'=>                            WT_I18N::translate('Place of Cremation'),
	'CREM:SOUR'=>                            WT_I18N::translate('Source for Cremation'),
	'CTRY'=> /* I18N: gedcom tag CTRY */     WT_I18N::translate('Country'),
	'DATA'=> /* I18N: gedcom tag DATA */     WT_I18N::translate('Data'),
	'DATA:DATE'=>                            WT_I18N::translate('Date of entry in original source'),
	'DATE'=> /* I18N: gedcom tag DATE */     WT_I18N::translate('Date'),
	'DEAT'=> /* I18N: gedcom tag DEAT */     WT_I18N::translate('Death'),
	'DEAT:CAUS'=>                            WT_I18N::translate('Cause of death'),
	'DEAT:DATE'=>                            WT_I18N::translate('Date of death'),
	'DEAT:PLAC'=>                            WT_I18N::translate('Place of death'),
	'DEAT:SOUR'=>                            WT_I18N::translate('Source for death'),
	'DESC'=> /* I18N: gedcom tag DESC */     WT_I18N::translate('Descendants'),
	'DESI'=> /* I18N: gedcom tag DESI */     WT_I18N::translate('Descendants interest'),
	'DEST'=> /* I18N: gedcom tag DEST */     WT_I18N::translate('Destination'),
	'DIV'=> /* I18N: gedcom tag DIV */       WT_I18N::translate('Divorce'),
	'DIVF'=> /* I18N: gedcom tag DIVF */     WT_I18N::translate('Divorce filed'),
	'DSCR'=> /* I18N: gedcom tag DSCR */     WT_I18N::translate('Description'),
	'EDUC'=> /* I18N: gedcom tag EDUC */     WT_I18N::translate('Education'),
	'EDUC:AGNC'=>                            WT_I18N::translate('School or college'),
	'EMAI'=> /* I18N: gedcom tag EMAI */     WT_I18N::translate('Email address'),
	'EMAIL'=> /* I18N: gedcom tag EMAIL */   WT_I18N::translate('Email address'),
	'EMAL'=> /* I18N: gedcom tag EMAL */     WT_I18N::translate('Email address'),
	'EMIG'=> /* I18N: gedcom tag EMIG */     WT_I18N::translate('Emigration'),
	'EMIG:DATE'=>                            WT_I18N::translate('Date of Emigration'),
	'EMIG:PLAC'=>                            WT_I18N::translate('Place of Emigration'),
	'ENDL'=> /* I18N: gedcom tag ENDL */     WT_I18N::translate('LDS endowment'),
	'ENDL:DATE'=>                            WT_I18N::translate('Date of LDS Endowment'),
	'ENDL:PLAC'=>                            WT_I18N::translate('Place of LDS Endowment'),
	'ENDL:TEMP'=>                            WT_I18N::translate('Temple of LDS Endowment'),
	'ENGA'=> /* I18N: gedcom tag ENGA */     WT_I18N::translate('Engagement'),
	'ENGA:DATE'=>                            WT_I18N::translate('Date of engagement'),
	'ENGA:PLAC'=>                            WT_I18N::translate('Place of engagement'),
	'ENGA:SOUR'=>                            WT_I18N::translate('Source for engagement'),
	'EVEN'=> /* I18N: gedcom tag EVEN */     WT_I18N::translate('Event'),
	'EVEN:DATE'=>                            WT_I18N::translate('Date of Event'),
	'EVEN:PLAC'=>                            WT_I18N::translate('Place of Event'),
	'FACT'=> /* I18N: gedcom tag FACT */     WT_I18N::translate('Fact'),
	'FAM'=> /* I18N: gedcom tag FAM */       WT_I18N::translate('Family'),
	'FAMC'=> /* I18N: gedcom tag FAMC */     WT_I18N::translate('Family as a child'),
	'FAMC:HUSB:BIRT:PLAC'=>                  WT_I18N::translate('Father\'s birthplace'),
	'FAMC:HUSB:FAMC:HUSB:GIVN'=>             WT_I18N::translate('Paternal grandfather\'s given name'),
	'FAMC:HUSB:FAMC:WIFE:GIVN'=>             WT_I18N::translate('Paternal grandmother\'s given name'),
	'FAMC:HUSB:GIVN'=>                       WT_I18N::translate('Father\'s given name'),
	'FAMC:HUSB:OCCU'=>                       WT_I18N::translate('Father\'s occupation'),
	'FAMC:HUSB:SURN'=>                       WT_I18N::translate('Father\'s surname'),
	'FAMC:MARR:PLAC'=>                       WT_I18N::translate('Parents\' marriage place'),
	'FAMC:WIFE:BIRT:PLAC'=>                  WT_I18N::translate('Mother\'s birthplace'),
	'FAMC:WIFE:FAMC:HUSB:GIVN'=>             WT_I18N::translate('Maternal grandfather\'s given name'),
	'FAMC:WIFE:FAMC:WIFE:GIVN'=>             WT_I18N::translate('Maternal grandmother\'s Given Name'),
	'FAMC:WIFE:GIVN'=>                       WT_I18N::translate('Mother\'s given name'),
	'FAMC:WIFE:SURN'=>                       WT_I18N::translate('Mother\'s surname'),
	'FAMF'=> /* I18N: gedcom tag FAMF */     WT_I18N::translate('Family file'),
	'FAMS'=> /* I18N: gedcom tag FAMS */     WT_I18N::translate('Family as a spouse'),
	'FAMS:CENS:DATE'=>                       WT_I18N::translate('Spouse census date'),
	'FAMS:CENS:PLAC'=>                       WT_I18N::translate('Spouse census place'),
	'FAMS:CHIL:BIRT:PLAC'=>                  WT_I18N::translate('Child\'s birth place'),
	'FAMS:DIV:DATE'=>                        WT_I18N::translate('Spouse divorce date'),
	'FAMS:DIV:PLAC'=>                        WT_I18N::translate('Spouse divorce place'),
	'FAMS:MARR:DAT'=>                        WT_I18N::translate('Date of marriage'),
	'FAMS:MARR:PLAC'=>                       WT_I18N::translate('Place of marriage'),
	'FAMS:NOTE'=>                            WT_I18N::translate('Spouse note'),
	'FAMS:SLGS:DATE'=>                       WT_I18N::translate('LDS spouse sealing date'),
	'FAMS:SLGS:PLAC'=>                       WT_I18N::translate('LDS spouse sealing place'),
	'FAMS:SLGS:TEMP'=>                       WT_I18N::translate('LDS spouse sealing temple'),
	'FAMS:SPOUSE:BIRT:PLAC'=>                WT_I18N::translate('Spouse\'s birth place'),
	'FAMS:SPOUSE:DEAT:PLAC'=>                WT_I18N::translate('Spouse\'s death place'),
	'FAX'=> /* I18N: gedcom tag FAX */       WT_I18N::translate('Fax'),
	'FCOM'=> /* I18N: gedcom tag FCOM */     WT_I18N::translate('First communion'),
	'FCOM:DATE'=>                            WT_I18N::translate('Date of first communion'),
	'FCOM:PLAC'=>                            WT_I18N::translate('Place of first communion'),
	'FCOM:SOUR'=>                            WT_I18N::translate('Source for first communion'),
	'FILE'=> /* I18N: gedcom tag FILE */     WT_I18N::translate('Filename'),
	'FONE'=> /* I18N: gedcom tag FONE */     WT_I18N::translate('Phonetic'),
	'FORM'=> /* I18N: gedcom tag FORM */     WT_I18N::translate('Format'),
	'GEDC'=> /* I18N: gedcom tag GEDC */     WT_I18N::translate('Gedcom'),
	'GIVN'=> /* I18N: gedcom tag GIVN */     WT_I18N::translate('Given names'),
	'GRAD'=> /* I18N: gedcom tag GRAD */     WT_I18N::translate('Graduation'),
	'HEAD'=> /* I18N: gedcom tag HEAD */     WT_I18N::translate('Header'),
	'HUSB'=> /* I18N: gedcom tag HUSB */     WT_I18N::translate('Husband'),
	'IDNO'=> /* I18N: gedcom tag IDNO */     WT_I18N::translate('Identification number'),
	'IMMI'=> /* I18N: gedcom tag IMMI */     WT_I18N::translate('Immigration'),
	'IMMI:DATE'=>                            WT_I18N::translate('Date of Immigration'),
	'IMMI:PLAC'=>                            WT_I18N::translate('Place of Immigration'),
	'INDI'=> /* I18N: gedcom tag INDI */     WT_I18N::translate('Individual'),
	'INFL'=> /* I18N: gedcom tag INFL */     WT_I18N::translate('Infant'),
	'LANG'=> /* I18N: gedcom tag LANG */     WT_I18N::translate('Language'),
	'LATI'=> /* I18N: gedcom tag LATI */     WT_I18N::translate('Latitude'),
	'LEGA'=> /* I18N: gedcom tag LEGA */     WT_I18N::translate('Legatee'),
	'LONG'=> /* I18N: gedcom tag LONG */     WT_I18N::translate('Longitude'),
	'MAP'=> /* I18N: gedcom tag MAP */       WT_I18N::translate('Map'),
	'MARB'=> /* I18N: gedcom tag MARB */     WT_I18N::translate('Marriage banns'),
	'MARB:DATE'=>                            WT_I18N::translate('Date of marriage banns'),
	'MARB:PLAC'=>                            WT_I18N::translate('Place of marriage banns'),
	'MARB:SOUR'=>                            WT_I18N::translate('Source for marriage banns'),
	'MARC'=> /* I18N: gedcom tag MARC */     WT_I18N::translate('Marriage contract'),
	'MARL'=> /* I18N: gedcom tag MARL */     WT_I18N::translate('Marriage licence'),
	'MARR'=> /* I18N: gedcom tag MARR */     WT_I18N::translate('Marriage'),
	'MARR:DATE'=>                            WT_I18N::translate('Date of marriage'),
	'MARR:PLAC'=>                            WT_I18N::translate('Place of marriage'),
	'MARR:SOUR'=>                            WT_I18N::translate('Source for marriage'),
	'MARR_CIVIL'=>                           WT_I18N::translate('Civil marriage'),
	'MARR_PARTNERS'=>                        WT_I18N::translate('Registered partnership'),
	'MARR_RELIGIOUS'=>                       WT_I18N::translate('Religious marriage'),
	'MARR_UNKNOWN'=>                         WT_I18N::translate('Marriage type unknown'),
	'MARS'=> /* I18N: gedcom tag MARS */     WT_I18N::translate('Marriage settlement'),
	'MEDI'=> /* I18N: gedcom tag MEDI */     WT_I18N::translate('Media type'),
	'NAME'=> /* I18N: gedcom tag NAME */     WT_I18N::translate('Name'),
	'NAME:FONE'=>                            WT_I18N::translate('Phonetic name'),
	'NAME:_HEB'=>                            WT_I18N::translate('Name in Hebrew'),
	'NATI'=> /* I18N: gedcom tag NATI */     WT_I18N::translate('Nationality'),
	'NATU'=> /* I18N: gedcom tag NATU */     WT_I18N::translate('Naturalization'),
	'NATU:DATE'=>                            WT_I18N::translate('Date of Naturalization'),
	'NATU:PLAC'=>                            WT_I18N::translate('Place of Naturalization'),
	'NCHI'=> /* I18N: gedcom tag NCHI */     WT_I18N::translate('Number of children'),
	'NICK'=> /* I18N: gedcom tag NICK */     WT_I18N::translate('Nickname'),
	'NMR'=> /* I18N: gedcom tag NMR */       WT_I18N::translate('Number of marriages'),
	'NOTE'=> /* I18N: gedcom tag NOTE */     WT_I18N::translate('Note'),
	'NPFX'=> /* I18N: gedcom tag NPFX */     WT_I18N::translate('Name prefix'),
	'NSFX'=> /* I18N: gedcom tag NSFX */     WT_I18N::translate('Name suffix'),
	'OBJE'=> /* I18N: gedcom tag OBJE */     WT_I18N::translate('Multimedia object'),
	'OCCU'=> /* I18N: gedcom tag OCCU */     WT_I18N::translate('Occupation'),
	'OCCU:AGNC'=>                            WT_I18N::translate('Employer'),
	'ORDI'=> /* I18N: gedcom tag ORDI */     WT_I18N::translate('Ordinance'),
	'ORDN'=> /* I18N: gedcom tag ORDN */     WT_I18N::translate('Ordination'),
	'ORDN:AGNC'=>                            WT_I18N::translate('Religious Institution'),
	'ORDN:DATE'=>                            WT_I18N::translate('Date of Ordination'),
	'ORDN:PLAC'=>                            WT_I18N::translate('Place of Ordination'),
	'PAGE'=> /* I18N: gedcom tag PAGE */     WT_I18N::translate('Citation details'),
	'PEDI'=> /* I18N: gedcom tag PEDI */     WT_I18N::translate('Pedigree'),
	'PHON'=> /* I18N: gedcom tag PHON */     WT_I18N::translate('Phone'),
	'PLAC'=> /* I18N: gedcom tag PLAC */     WT_I18N::translate('Place'),
	'PLAC:FONE'=>                            WT_I18N::translate('Phonetic place'),
	'PLAC:ROMN'=>                            WT_I18N::translate('Romanized place'),
	'PLAC:_HEB'=>                            WT_I18N::translate('Place in Hebrew'),
	'POST'=> /* I18N: gedcom tag POST */     WT_I18N::translate('Postal code'),
	'PROB'=> /* I18N: gedcom tag PROB */     WT_I18N::translate('Probate'),
	'PROP'=> /* I18N: gedcom tag PROP */     WT_I18N::translate('Property'),
	'PUBL'=> /* I18N: gedcom tag PUBL */     WT_I18N::translate('Publication'),
	'QUAY'=> /* I18N: gedcom tag QUAY */     WT_I18N::translate('Quality of data'),
	'REFN'=> /* I18N: gedcom tag REFN */     WT_I18N::translate('Reference number'),
	'RELA'=> /* I18N: gedcom tag RELA */     WT_I18N::translate('Relationship'),
	'RELI'=> /* I18N: gedcom tag RELI */     WT_I18N::translate('Religion'),
	'REPO'=> /* I18N: gedcom tag REPO */     WT_I18N::translate('Repository'),
	'RESI'=> /* I18N: gedcom tag RESI */     WT_I18N::translate('Residence'),
	'RESI:DATE'=>                            WT_I18N::translate('Date of Residence'),
	'RESI:PLAC'=>                            WT_I18N::translate('Place of Residence'),
	'RESN'=> /* I18N: gedcom tag RESN */     WT_I18N::translate('Restriction'),
	'RETI'=> /* I18N: gedcom tag RETI */     WT_I18N::translate('Retirement'),
	'RETI:AGNC'=>                            WT_I18N::translate('Employer'),
	'RFN'=> /* I18N: gedcom tag RFN */       WT_I18N::translate('Record file number'),
	'RIN'=> /* I18N: gedcom tag RIN */       WT_I18N::translate('Record ID number'),
	'ROLE'=> /* I18N: gedcom tag ROLE */     WT_I18N::translate('Role'),
	'ROMN'=> /* I18N: gedcom tag ROMN */     WT_I18N::translate('Romanized'),
	'SERV'=> /* I18N: gedcom tag SERV */     WT_I18N::translate('Remote server'),
	'SEX'=> /* I18N: gedcom tag SEX */       WT_I18N::translate('Gender'),
	'SHARED_NOTE'=>                          WT_I18N::translate('Shared note'),
	'SLGC'=> /* I18N: gedcom tag SLGC */     WT_I18N::translate('LDS child sealing'),
	'SLGC:DATE'=>                            WT_I18N::translate('Date of LDS Child Sealing'),
	'SLGC:PLAC'=>                            WT_I18N::translate('Place of LDS Child Sealing'),
	'SLGC:TEMP'=>                            WT_I18N::translate('Temple of LDS Child Sealing'),
	'SLGS'=> /* I18N: gedcom tag SLGS */     WT_I18N::translate('LDS spouse sealing'),
	'SLGS:DATE'=>                            WT_I18N::translate('Date of LDS Spouse Sealing'),
	'SLGS:PLAC'=>                            WT_I18N::translate('Place of LDS Spouse Sealing'),
	'SLGS:TEMP'=>                            WT_I18N::translate('Temple of LDS Spouse Sealing'),
	'SOUR'=> /* I18N: gedcom tag SOUR */     WT_I18N::translate('Source'),
	'SPFX'=> /* I18N: gedcom tag SPFX */     WT_I18N::translate('Surname prefix'),
	'SSN'=> /* I18N: gedcom tag SSN */       WT_I18N::translate('Social Security Number'),
	'STAE'=> /* I18N: gedcom tag STAE */     WT_I18N::translate('State'),
	'STAT'=> /* I18N: gedcom tag STAT */     WT_I18N::translate('Status'),
	'STAT:DATE'=>                            WT_I18N::translate('Status change date'),
	'SUBM'=> /* I18N: gedcom tag SUBM */     WT_I18N::translate('Submitter'),
	'SUBN'=> /* I18N: gedcom tag SUBN */     WT_I18N::translate('Submission'),
	'SURN'=> /* I18N: gedcom tag SURN */     WT_I18N::translate('Surname'),
	'TEMP'=> /* I18N: gedcom tag TEMP */     WT_I18N::translate('Temple'),
	'TEXT'=> /* I18N: gedcom tag TEXT */     WT_I18N::translate('Text'),
	'TIME'=> /* I18N: gedcom tag TIME */     WT_I18N::translate('Time'),
	'TITL'=> /* I18N: gedcom tag TITL */     WT_I18N::translate('Title'),
	'TITL:FONE'=>                            WT_I18N::translate('Phonetic title'),
	'TITL:ROMN'=>                            WT_I18N::translate('Romanized title'),
	'TITL:_HEB'=>                            WT_I18N::translate('Title in Hebrew'),
	'TRLR'=> /* I18N: gedcom tag TRLR */     WT_I18N::translate('Trailer'),
	'TYPE'=> /* I18N: gedcom tag TYPE */     WT_I18N::translate('Type'),
	'URL'=> /* I18N: gedcom tag URL */       WT_I18N::translate('Web URL'),
	'VERS'=> /* I18N: gedcom tag VERS */     WT_I18N::translate('Version'),
	'WIFE'=> /* I18N: gedcom tag WIFE */     WT_I18N::translate('Wife'),
	'WILL'=> /* I18N: gedcom tag WILL */     WT_I18N::translate('Will'),
	'WWW'=> /* I18N: gedcom tag WWW */       WT_I18N::translate('Web home page'),
	'_ADOP_CHIL'=>                           WT_I18N::translate('Adoption of a child'),
	'_ADOP_GCHI'=>                           WT_I18N::translate('Adoption of a grandchild'),
	'_ADOP_GCH1'=>                           WT_I18N::translate('Adoption of a grandchild'),
	'_ADOP_GCH2'=>                           WT_I18N::translate('Adoption of a grandchild'),
	'_ADOP_HSIB'=>                           WT_I18N::translate('Adoption of a half-sibling'),
	'_ADOP_SIBL'=>                           WT_I18N::translate('Adoption of a sibling'),
	'_ADPF'=> /* I18N: gedcom tag _ADPF */   WT_I18N::translate('Adopted by father'),
	'_ADPM'=> /* I18N: gedcom tag _ADPM */   WT_I18N::translate('Adopted by mother'),
	'_AKA'=> /* I18N: gedcom tag _AKA */     WT_I18N::translate('Also known as'),
	'_AKAN'=> /* I18N: gedcom tag _AKAN */   WT_I18N::translate('Also known as'),
	'_BAPM_CHIL'=>                           WT_I18N::translate('Baptism of a child'),
	'_BAPM_GCHI'=>                           WT_I18N::translate('Baptism of a grandchild'),
	'_BAPM_GCH1'=>                           WT_I18N::translate('Baptism of a grandchild'),
	'_BAPM_GCH2'=>                           WT_I18N::translate('Baptism of a grandchild'),
	'_BAPM_HSIB'=>                           WT_I18N::translate('Baptism of a half-sibling'),
	'_BAPM_SIBL'=>                           WT_I18N::translate('Baptism of a sibling'),
	'_BIBL'=> /* I18N: gedcom tag _BIBL */   WT_I18N::translate('Bibliography'),
	'_BIRT_CHIL'=>                           WT_I18N::translate('Birth of a child'),
	'_BIRT_GCHI'=>                           WT_I18N::translate('Birth of a grandchild'),
	'_BIRT_GCH1'=>                           WT_I18N::translate('Birth of a grandchild'),
	'_BIRT_GCH2'=>                           WT_I18N::translate('Birth of a grandchild'),
	'_BIRT_HSIB'=>                           WT_I18N::translate('Birth of a half-sibling'),
	'_BIRT_SIBL'=>                           WT_I18N::translate('Birth of a sibling'),
	'_BRTM'=> /* I18N: gedcom tag _BRTM */   WT_I18N::translate('Brit milah'),
	'_BRTM:DATE'=>                           WT_I18N::translate('Date of brit milah'),
	'_BRTM:PLAC'=>                           WT_I18N::translate('Place of brit milah'),
	'_BRTM:SOUR'=>                           WT_I18N::translate('Source for brit milah'),
	'_BURI_CHIL'=>                           WT_I18N::translate('Burial of a child'),
	'_BURI_GCHI'=>                           WT_I18N::translate('Burial of a grandchild'),
	'_BURI_GCH1'=>                           WT_I18N::translate('Burial of a grandchild'),
	'_BURI_GCH2'=>                           WT_I18N::translate('Burial of a grandchild'),
	'_BURI_GPAR'=>                           WT_I18N::translate('Burial of a grand-parent'),
	'_BURI_HSIB'=>                           WT_I18N::translate('Burial of a half-sibling'),
	'_BURI_SIBL'=>                           WT_I18N::translate('Burial of a sibling'),
	'_BURI_SPOU'=>                           WT_I18N::translate('Burial of a spouse'),
	'_CHR_CHIL'=>                            WT_I18N::translate('Christening of a child'),
	'_CHR_GCHI'=>                            WT_I18N::translate('Christening of a grandchild'),
	'_CHR_GCH1'=>                            WT_I18N::translate('Christening of a grandchild'),
	'_CHR_GCH2'=>                            WT_I18N::translate('Christening of a grandchild'),
	'_CHR_HSIB'=>                            WT_I18N::translate('Christening of a half-sibling'),
	'_CHR_SIBL'=>                            WT_I18N::translate('Christening of a sibling'),
	'_COML'=> /* I18N: gedcom tag _COML */   WT_I18N::translate('Common Law Marriage'),
	'_CREM_CHIL'=>                           WT_I18N::translate('Cremation of a child'),
	'_CREM_GCHI'=>                           WT_I18N::translate('Cremation of a grandchild'),
	'_CREM_GCH1'=>                           WT_I18N::translate('Cremation of a grandchild'),
	'_CREM_GCH2'=>                           WT_I18N::translate('Cremation of a grandchild'),
	'_CREM_GPAR'=>                           WT_I18N::translate('Cremation of a grand-parent'),
	'_CREM_HSIB'=>                           WT_I18N::translate('Cremation of a half-sibling'),
	'_CREM_SIBL'=>                           WT_I18N::translate('Cremation of a sibling'),
	'_CREM_SPOU'=>                           WT_I18N::translate('Cremation of a spouse'),
	'_DBID'=> /* I18N: gedcom tag _DBID */   WT_I18N::translate('Linked database ID'),
	'_DEAT_CHIL'=>                           WT_I18N::translate('Death of a child'),
	'_DEAT_GCHI'=>                           WT_I18N::translate('Death of a grandchild'),
	'_DEAT_GCH1'=>                           WT_I18N::translate('Death of a grandchild'),
	'_DEAT_GCH2'=>                           WT_I18N::translate('Death of a grandchild'),
	'_DEAT_GPAR'=>                           WT_I18N::translate('Death of a grand-parent'),
	'_DEAT_HSIB'=>                           WT_I18N::translate('Death of a half-sibling'),
	'_DEAT_PARE'=>                           WT_I18N::translate('Death of a parent'),
	'_DEAT_SIBL'=>                           WT_I18N::translate('Death of a sibling'),
	'_DEAT_SPOU'=>                           WT_I18N::translate('Death of a spouse'),
	'_DEG'=> /* I18N: gedcom tag _DEG */     WT_I18N::translate('Degree'),
	'_DETS'=> /* I18N: gedcom tag _DETS */   WT_I18N::translate('Death of one spouse'),
	'_EMAIL'=> /* I18N: gedcom tag _EMAIL */ WT_I18N::translate('Email address'),
	'_EYEC'=> /* I18N: gedcom tag _EYEC */   WT_I18N::translate('Eye color'),
	'_FA1'=>                                 WT_I18N::translate('Fact 1'),
	'_FA2'=>                                 WT_I18N::translate('Fact 2'),
	'_FA3'=>                                 WT_I18N::translate('Fact 3'),
	'_FA4'=>                                 WT_I18N::translate('Fact 4'),
	'_FA5'=>                                 WT_I18N::translate('Fact 5'),
	'_FA6'=>                                 WT_I18N::translate('Fact 6'),
	'_FA7'=>                                 WT_I18N::translate('Fact 7'),
	'_FA8'=>                                 WT_I18N::translate('Fact 8'),
	'_FA9'=>                                 WT_I18N::translate('Fact 9'),
	'_FA10'=>                                WT_I18N::translate('Fact 10'),
	'_FA11'=>                                WT_I18N::translate('Fact 11'),
	'_FA12'=>                                WT_I18N::translate('Fact 12'),
	'_FA13'=>                                WT_I18N::translate('Fact 13'),
	'_FNRL'=> /* I18N: gedcom tag _FNRL */   WT_I18N::translate('Funeral'),
	'_FREL'=> /* I18N: gedcom tag _FREL */   WT_I18N::translate('Relationship to father'),
	'_GEDF'=> /* I18N: gedcom tag _GEDF */   WT_I18N::translate('GEDCOM file'),
	'_HAIR'=> /* I18N: gedcom tag _HAIR */   WT_I18N::translate('Hair color'),
	'_HEB'=> /* I18N: gedcom tag _HEB */     WT_I18N::translate('Hebrew'),
	'_HEIG'=> /* I18N: gedcom tag _HEIG */   WT_I18N::translate('Height'),
	'_HNM'=> /* I18N: gedcom tag _HNM */     WT_I18N::translate('Hebrew name'),
	'_HOL'=> /* I18N: gedcom tag _HOL */     WT_I18N::translate('Holocaust'),
	'_INTE'=> /* I18N: gedcom tag _INTE */   WT_I18N::translate('Interred'),
	'_MARB_CHIL'=>                           WT_I18N::translate('Marriage Banns of a child'),
	'_MARB_FAMC'=>                           WT_I18N::translate('Marriage banns of parents'),
	'_MARB_GCHI'=>                           WT_I18N::translate('Marriage Banns of a grandchild'),
	'_MARB_GCH1'=>                           WT_I18N::translate('Marriage Banns of a grandchild'),
	'_MARB_GCH2'=>                           WT_I18N::translate('Marriage Banns of a grandchild'),
	'_MARB_HSIB'=>                           WT_I18N::translate('Marriage banns of a half-sibling'),
	'_MARB_PARE'=>                           WT_I18N::translate('Marriage banns of a parent'),
	'_MARB_SIBL'=>                           WT_I18N::translate('Marriage banns of a sibling'),
	'_MARI'=> /* I18N: gedcom tag _MARI */   WT_I18N::translate('Marriage Intention'),
	'_MARNM'=> /* I18N: gedcom tag _MARNM */ WT_I18N::translate('Married Name'),
	'_PRIM'=> /* I18N: gedcom tag _PRIM */   WT_I18N::translate('Highlighted image'),
	'_MARNM_SURN'=>                          WT_I18N::translate('Married Surname'),
	'_MARR_CHIL'=>                           WT_I18N::translate('Marriage of a child'),
	'_MARR_FAMC'=>                           WT_I18N::translate('Marriage of parents'),
	'_MARR_GCHI'=>                           WT_I18N::translate('Marriage of a grandchild'),
	'_MARR_GCH1'=>                           WT_I18N::translate('Marriage of a grandchild'),
	'_MARR_GCH2'=>                           WT_I18N::translate('Marriage of a grandchild'),
	'_MARR_HSIB'=>                           WT_I18N::translate('Marriage of a half-sibling'),
	'_MARR_PARE'=>                           WT_I18N::translate('Marriage of a parent'),
	'_MARR_SIBL'=>                           WT_I18N::translate('Marriage of a sibling'),
	'_MBON'=> /* I18N: gedcom tag _MBON */   WT_I18N::translate('Marriage bond'),
	'_MDCL'=> /* I18N: gedcom tag _MDCL */   WT_I18N::translate('Medical'),
	'_MEDC'=> /* I18N: gedcom tag _MEDC */   WT_I18N::translate('Medical condition'),
	'_MEND'=> /* I18N: gedcom tag _MEND */   WT_I18N::translate('Marriage ending status'),
	'_MILI'=> /* I18N: gedcom tag _MILI */   WT_I18N::translate('Military'),
	'_MILT'=> /* I18N: gedcom tag _MILT */   WT_I18N::translate('Military service'),
	'_MREL'=> /* I18N: gedcom tag _MREL */   WT_I18N::translate('Relationship to mother'),
	'_MSTAT'=> /* I18N: gedcom tag _MSTAT */ WT_I18N::translate('Marriage beginning status'),
	'_NAME'=> /* I18N: gedcom tag _NAME */   WT_I18N::translate('Mailing name'),
	'_NAMS'=> /* I18N: gedcom tag _NAMS */   WT_I18N::translate('Namesake'),
	'_NLIV'=> /* I18N: gedcom tag _NLIV */   WT_I18N::translate('Not living'),
	'_NMAR'=> /* I18N: gedcom tag _NMAR */   WT_I18N::translate('Never married'),
	'_NMR'=> /* I18N: gedcom tag _NMR */     WT_I18N::translate('Not married'),
	'_WT_USER'=>                             WT_I18N::translate('by'),
	'_PRMN'=> /* I18N: gedcom tag _PRMN */   WT_I18N::translate('Permanent number'),
	'_SCBK'=> /* I18N: gedcom tag _SCBK */   WT_I18N::translate('Scrapbook'),
	'_SEPR'=> /* I18N: gedcom tag _SEPR */   WT_I18N::translate('Separated'),
	'_SSHOW'=> /* I18N: gedcom tag _SSHOW */ WT_I18N::translate('Slide show'),
	'_STAT'=> /* I18N: gedcom tag _STAT */   WT_I18N::translate('Marriage status'),
	'_SUBQ'=> /* I18N: gedcom tag _SUBQ */   WT_I18N::translate('Short version'),
	'_THUM'=> /* I18N: gedcom tag _THUM */   WT_I18N::translate('Always use main image?'),
	'_TODO'=> /* I18N: gedcom tag _TODO */   WT_I18N::translate('To-do item'),
	'_TYPE'=> /* I18N: gedcom tag _TYPE */   WT_I18N::translate('Media type'),
	'_UID'=> /* I18N: gedcom tag _UID */     WT_I18N::translate('Globally unique identifier'),
	'_URL'=> /* I18N: gedcom tag _URL */     WT_I18N::translate('Web URL'),
	'_WEIG'=> /* I18N: gedcom tag _WEIG */   WT_I18N::translate('Weight'),
	'_YART'=> /* I18N: gedcom tag _YART */   WT_I18N::translate('Yahrzeit'),
	'__BRTM_CHIL'=>WT_I18N::translate  (                     'Brit milah of a son'), // Brit milah applies only to males
	'__BRTM_GCHI'=>WT_I18N::translate  (                     'Brit milah of a grandson'),
	'__BRTM_GCH1'=>WT_I18N::translate_c('daughter\'s son',   'Brit milah of a grandson'),
	'__BRTM_GCH2'=>WT_I18N::translate_c('son\'s son',        'Brit milah of a grandson'),
	'__BRTM_HSIB'=>WT_I18N::translate  (                     'Brit milah of a half-brother'),
	'__BRTM_SIBL'=>WT_I18N::translate  (                     'Brit milah of a brother'),
);

// Facts, as applied to Males.
// Use the context-sensitive translations when the word is the same in English
$FACTS_M=array(
	// close relatives facts
	'_ADOP_CHIL'=>WT_I18N::translate  (        'Adoption of a son'),
	'_ADOP_GCHI'=>WT_I18N::translate  (        'Adoption of a grandson'),
	'_ADOP_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Adoption of a grandson'),
	'_ADOP_GCH2'=>WT_I18N::translate_c('son\'s son',      'Adoption of a grandson'),
	'_ADOP_HSIB'=>WT_I18N::translate  (        'Adoption of a half-brother'),
	'_ADOP_SIBL'=>WT_I18N::translate  (        'Adoption of a brother'),
	'_BAPM_CHIL'=>WT_I18N::translate  (        'Baptism of a son'),
	'_BAPM_GCHI'=>WT_I18N::translate  (        'Baptism of a grandson'),
	'_BAPM_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Baptism of a grandson'),
	'_BAPM_GCH2'=>WT_I18N::translate_c('son\'s son',      'Baptism of a grandson'),
	'_BAPM_HSIB'=>WT_I18N::translate  (        'Baptism of a half-brother'),
	'_BAPM_SIBL'=>WT_I18N::translate  (        'Baptism of a brother'),
	'_BIRT_CHIL'=>WT_I18N::translate  (        'Birth of a son'),
	'_BIRT_GCHI'=>WT_I18N::translate  (        'Birth of a grandson'),
	'_BIRT_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Birth of a grandson'),
	'_BIRT_GCH2'=>WT_I18N::translate_c('son\'s son',      'Birth of a grandson'),
	'_BIRT_HSIB'=>WT_I18N::translate  (        'Birth of a half-brother'),
	'_BIRT_SIBL'=>WT_I18N::translate  (        'Birth of a brother'),
	'_BURI_CHIL'=>WT_I18N::translate  (        'Burial of a son'),
	'_BURI_GCHI'=>WT_I18N::translate  (        'Burial of a grandson'),
	'_BURI_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Burial of a grandson'),
	'_BURI_GCH2'=>WT_I18N::translate_c('son\'s son',      'Burial of a grandson'),
	'_BURI_GPAR'=>WT_I18N::translate  (        'Burial of a grandfather'),
	'_BURI_GPA1'=>WT_I18N::translate  (        'Burial of a paternal grandfather'),
	'_BURI_GPA2'=>WT_I18N::translate  (        'Burial of a maternal grandfather'),
	'_BURI_HSIB'=>WT_I18N::translate  (        'Burial of a half-brother'),
	'_BURI_PARE'=>WT_I18N::translate  (        'Burial of a father'),
	'_BURI_SIBL'=>WT_I18N::translate  (        'Burial of a brother'),
	'_BURI_SPOU'=>WT_I18N::translate  (        'Burial of a husband'),
	'_CHR_CHIL'=>WT_I18N::translate   (        'Christening of a son'),
	'_CHR_GCHI'=>WT_I18N::translate   (        'Christening of a grandson'),
	'_CHR_GCH1'=>WT_I18N::translate_c ('daughter\'s son', 'Christening of a grandson'),
	'_CHR_GCH2'=>WT_I18N::translate_c ('son\'s son',      'Christening of a grandson'),
	'_CHR_HSIB'=>WT_I18N::translate   (        'Christening of a half-brother'),
	'_CHR_SIBL'=>WT_I18N::translate   (        'Christening of a brother'),
	'_CREM_CHIL'=>WT_I18N::translate  (        'Cremation of a son'),
	'_CREM_GCHI'=>WT_I18N::translate  (        'Cremation of a grandson'),
	'_CREM_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Cremation of a grandson'),
	'_CREM_GCH2'=>WT_I18N::translate_c('son\'s son',      'Cremation of a grandson'),
	'_CREM_GPAR'=>WT_I18N::translate  (        'Cremation of a grandfather'),
	'_CREM_GPA1'=>WT_I18N::translate  (        'Cremation of a paternal grandfather'),
	'_CREM_GPA2'=>WT_I18N::translate  (        'Cremation of a maternal grandfather'),
	'_CREM_HSIB'=>WT_I18N::translate  (        'Cremation of a half-brother'),
	'_CREM_PARE'=>WT_I18N::translate  (        'Cremation of a father'),
	'_CREM_SIBL'=>WT_I18N::translate  (        'Cremation of a brother'),
	'_CREM_SPOU'=>WT_I18N::translate  (        'Cremation of a husband'),
	'_DEAT_CHIL'=>WT_I18N::translate  (        'Death of a son'),
	'_DEAT_GCHI'=>WT_I18N::translate  (        'Death of a grandson'),
	'_DEAT_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Death of a grandson'),
	'_DEAT_GCH2'=>WT_I18N::translate_c('son\'s son',      'Death of a grandson'),
	'_DEAT_GPAR'=>WT_I18N::translate  (        'Death of a grandfather'),
	'_DEAT_GPA1'=>WT_I18N::translate  (        'Death of a paternal grandfather'),
	'_DEAT_GPA2'=>WT_I18N::translate  (        'Death of a maternal grandfather'),
	'_DEAT_HSIB'=>WT_I18N::translate  (        'Death of a half-brother'),
	'_DEAT_PARE'=>WT_I18N::translate  (        'Death of a father'),
	'_DEAT_SIBL'=>WT_I18N::translate  (        'Death of a brother'),
	'_DEAT_SPOU'=>WT_I18N::translate  (        'Death of a husband'),
	'_MARB_CHIL'=>WT_I18N::translate  (        'Marriage Banns of a son'),
	'_MARB_GCHI'=>WT_I18N::translate  (        'Marriage Banns of a grandson'),
	'_MARB_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Marriage banns of a grandson'),
	'_MARB_GCH2'=>WT_I18N::translate_c('son\'s son',      'Marriage banns of a grandson'),
	'_MARB_PARE'=>WT_I18N::translate  (        'Marriage banns of a father'),
	'_MARB_HSIB'=>WT_I18N::translate  (        'Marriage Banns of a half-brother'),
	'_MARB_SIBL'=>WT_I18N::translate  (        'Marriage Banns of a brother'),
	'_MARR_CHIL'=>WT_I18N::translate  (        'Marriage of a son'),
	'_MARR_GCHI'=>WT_I18N::translate  (        'Marriage of a grandson'),
	'_MARR_GCH1'=>WT_I18N::translate_c('daughter\'s son', 'Marriage of a grandson'),
	'_MARR_GCH2'=>WT_I18N::translate_c('son\'s son',      'Marriage of a grandson'),
	'_MARR_HSIB'=>WT_I18N::translate  (        'Marriage of a half-brother'),
	'_MARR_PARE'=>WT_I18N::translate  (        'Marriage of a father'),
	'_MARR_SIBL'=>WT_I18N::translate  (        'Marriage of a brother'),
	// this person facts
	'_ADPF'     =>WT_I18N::translate_c('MALE', 'Adopted by father'),
	'_ADPM'     =>WT_I18N::translate_c('MALE', 'Adopted by mother'),
	'_AKA'      =>WT_I18N::translate_c('MALE', 'Also known as'),
	'_AKAN'     =>WT_I18N::translate_c('MALE', 'Also known as'),
	'_INTE'     =>WT_I18N::translate_c('MALE', 'Interred'),
	// one of spouse facts
	'_NMAR'     =>WT_I18N::translate_c('MALE', 'Never married'),
	'_NMR'      =>WT_I18N::translate_c('MALE', 'Not married'),
);

// Facts, as applied to Females
$FACTS_F=array(
	// close relatives facts
	'_ADOP_CHIL'=>WT_I18N::translate  (          'Adoption of a daughter'),
	'_ADOP_GCHI'=>WT_I18N::translate  (          'Adoption of a granddaughter'),
	'_ADOP_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Adoption of a granddaughter'),
	'_ADOP_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Adoption of a granddaughter'),
	'_ADOP_HSIB'=>WT_I18N::translate  (          'Adoption of a half-sister'),
	'_ADOP_SIBL'=>WT_I18N::translate  (          'Adoption of a sister'),
	'_BAPM_CHIL'=>WT_I18N::translate  (          'Baptism of a daughter'),
	'_BAPM_GCHI'=>WT_I18N::translate  (          'Baptism of a granddaughter'),
	'_BAPM_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Baptism of a granddaughter'),
	'_BAPM_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Baptism of a granddaughter'),
	'_BAPM_HSIB'=>WT_I18N::translate  (          'Baptism of a half-sister'),
	'_BAPM_SIBL'=>WT_I18N::translate  (          'Baptism of a sister'),
	'_BIRT_CHIL'=>WT_I18N::translate  (          'Birth of a daughter'),
	'_BIRT_GCHI'=>WT_I18N::translate  (          'Birth of a granddaughter'),
	'_BIRT_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Birth of a granddaughter'),
	'_BIRT_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Birth of a granddaughter'),
	'_BIRT_HSIB'=>WT_I18N::translate  (          'Birth of a half-sister'),
	'_BIRT_SIBL'=>WT_I18N::translate  (          'Birth of a sister'),
	'_BURI_CHIL'=>WT_I18N::translate  (          'Burial of a daughter'),
	'_BURI_GCHI'=>WT_I18N::translate  (          'Burial of a granddaughter'),
	'_BURI_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Burial of a granddaughter'),
	'_BURI_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Burial of a granddaughter'),
	'_BURI_GPAR'=>WT_I18N::translate  (          'Burial of a grandmother'),
	'_BURI_GPA1'=>WT_I18N::translate  (          'Burial of a paternal grandmother'),
	'_BURI_GPA2'=>WT_I18N::translate  (          'Burial of a maternal grandmother'),
	'_BURI_HSIB'=>WT_I18N::translate  (          'Burial of a half-sister'),
	'_BURI_PARE'=>WT_I18N::translate  (          'Burial of a mother'),
	'_BURI_SIBL'=>WT_I18N::translate  (          'Burial of a sister'),
	'_BURI_SPOU'=>WT_I18N::translate  (          'Burial of a wife'),
	'_CHR_CHIL'=>WT_I18N::translate   (          'Christening of a daughter'),
	'_CHR_GCHI'=>WT_I18N::translate   (          'Christening of a granddaughter'),
	'_CHR_GCH1'=>WT_I18N::translate_c ('daughter\'s daughter','Christening of a granddaughter'),
	'_CHR_GCH2'=>WT_I18N::translate_c ('son\'s daughter',     'Christening of a granddaughter'),
	'_CHR_HSIB'=>WT_I18N::translate   (          'Christening of a half-sister'),
	'_CHR_SIBL'=>WT_I18N::translate   (          'Christening of a sister'),
	'_CREM_CHIL'=>WT_I18N::translate  (          'Cremation of a daughter'),
	'_CREM_GCHI'=>WT_I18N::translate  (          'Cremation of a granddaughter'),
	'_CREM_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Cremation of a granddaughter'),
	'_CREM_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Cremation of a granddaughter'),
	'_CREM_GPAR'=>WT_I18N::translate  (          'Cremation of a grandmother'),
	'_CREM_GPA1'=>WT_I18N::translate  (          'Cremation of a paternal grandmother'),
	'_CREM_GPA2'=>WT_I18N::translate  (          'Cremation of a maternal grandmother'),
	'_CREM_HSIB'=>WT_I18N::translate  (          'Cremation of a half-sister'),
	'_CREM_PARE'=>WT_I18N::translate  (          'Cremation of a mother'),
	'_CREM_SIBL'=>WT_I18N::translate  (          'Cremation of a sister'),
	'_CREM_SPOU'=>WT_I18N::translate  (          'Cremation of a wife'),
	'_DEAT_CHIL'=>WT_I18N::translate  (          'Death of a daughter'),
	'_DEAT_PARE'=>WT_I18N::translate  (          'Death of a mother'),
	'_DEAT_GCHI'=>WT_I18N::translate  (          'Death of a granddaughter'),
	'_DEAT_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Death of a granddaughter'),
	'_DEAT_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Death of a granddaughter'),
	'_DEAT_GPAR'=>WT_I18N::translate  (          'Death of a grandmother'),
	'_DEAT_GPA1'=>WT_I18N::translate  (          'Death of a paternal grandmother'),
	'_DEAT_GPA2'=>WT_I18N::translate  (          'Death of a maternal grandmother'),
	'_DEAT_HSIB'=>WT_I18N::translate  (          'Death of a half-sister'),
	'_DEAT_SIBL'=>WT_I18N::translate  (          'Death of a sister'),
	'_DEAT_SPOU'=>WT_I18N::translate  (          'Death of a wife'),
	'_MARB_CHIL'=>WT_I18N::translate  (          'Marriage Banns of a daughter'),
	'_MARB_GCHI'=>WT_I18N::translate  (          'Marriage Banns of a granddaughter'),
	'_MARB_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Marriage banns of a granddaughter'),
	'_MARB_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Marriage banns of a granddaughter'),
	'_MARB_HSIB'=>WT_I18N::translate  (          'Marriage banns of a half-sister'),
	'_MARB_PARE'=>WT_I18N::translate  (          'Marriage banns of a mother'),
	'_MARB_SIBL'=>WT_I18N::translate  (          'Marriage banns of a sister'),
	'_MARR_CHIL'=>WT_I18N::translate  (          'Marriage of a daughter'),
	'_MARR_GCHI'=>WT_I18N::translate  (          'Marriage of a granddaughter'),
	'_MARR_GCH1'=>WT_I18N::translate_c('daughter\'s daughter','Marriage of a granddaughter'),
	'_MARR_GCH2'=>WT_I18N::translate_c('son\'s daughter',     'Marriage of a granddaughter'),
	'_MARR_HSIB'=>WT_I18N::translate  (          'Marriage of a half-sister'),
	'_MARR_PARE'=>WT_I18N::translate  (          'Marriage of a mother'),
	'_MARR_SIBL'=>WT_I18N::translate  (          'Marriage of a sister'),
	// this person facts
	'_ADPF'     =>WT_I18N::translate_c('FEMALE', 'Adopted by father'),
	'_ADPM'     =>WT_I18N::translate_c('FEMALE', 'Adopted by mother'),
	'_AKA'      =>WT_I18N::translate_c('FEMALE', 'Also known as'),
	'_AKAN'     =>WT_I18N::translate_c('FEMALE', 'Also known as'),
	'_INTE'     =>WT_I18N::translate_c('FEMALE', 'Interred'),
	// one of spouse facts
	'_NMAR'     =>WT_I18N::translate_c('FEMALE', 'Never married'),
	'_NMR'      =>WT_I18N::translate_c('FEMALE', 'Not married'),
);

// Facts, as applied to Repositories
$FACTS_REPO=array(
	'NAME'      =>WT_I18N::translate_c('Repository', 'Name')
);

// Create a label for a fact type.
function translate_fact($fact, $person=null) {
	global $FACTS, $FACTS_M, $FACTS_F, $FACTS_REPO;

	if ($person instanceof WT_Person && $person->getSex()=='M' && array_key_exists($fact, $FACTS_M)) {
		return $FACTS_M[$fact];
	}
	if ($person instanceof WT_Person && $person->getSex()=='F' && array_key_exists($fact, $FACTS_F)) {
		return $FACTS_F[$fact];
	}
	if ($person instanceof WT_Repository && array_key_exists($fact, $FACTS_REPO)) {
		return $FACTS_REPO[$fact];
	}
	if (array_key_exists($fact, $FACTS)) {
		return $FACTS[$fact];
	}
	// If no specialisation exists (e.g. DEAT:CAUS), then look for the general (CAUS)
	if (strpos($fact, ':')) {
		list(, $fact)=explode(':', $fact, 2);
		return translate_fact($fact, $person);
	}
	// Still no translation? Highlight this as an error
	return '<span class="error" title="'.WT_I18N::translate('Unrecognized GEDCOM Code').'">'.$fact.'</span>';
}

function abbreviate_fact($fact) {
	switch ($fact) {
	case 'BIRT':  return WT_I18N::translate_c('Abbreviation for birth',            'b.');
	case 'MARR':  return WT_I18N::translate_c('Abbreviation for marriage',         'm.');
	case 'DEAT':  return WT_I18N::translate_c('Abbreviation for death',            'd.');
	case 'PHON':  return WT_I18N::translate_c('Abbreviation for telephone number', 't.');
	case 'FAX':   return WT_I18N::translate_c('Abbreviation for fax number',       'f.');
	case 'EMAIL': return WT_I18N::translate_c('Abbreviation for email address',    'e.');
	default:      return utf8_substr(translate_fact($fact), 0, 1).'.'; // Just use the first letter of the full fact
	}
}

// Create a label for a relationship type.
function translate_rela($rela, $sex='') {
	global $RELA_CODES, $RELA_CODES_M, $RELA_CODES_F;

	if ($sex=='M' && array_key_exists($rela, $RELA_CODES_M)) {
		return $RELA_CODES_M[$rela];
	}
	if ($sex=='F' && array_key_exists($rela, $RELA_CODES_F)) {
		return $RELA_CODES_F[$rela];
	}
	if (array_key_exists($rela, $RELA_CODES)) {
		return $RELA_CODES[$rela];
	}
	// Still no translation? Return original relationship name
	return $rela;
}
