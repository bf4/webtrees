<?php
/**
 * HTML Report Generator
 *
 * used by the SAX parser to generate HTML reports from the XML report file.
 *
 * phpGedView: Genealogy Viewer
 * Copyright (C) 2002 to 2009  PGV Development Team.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @package PhpGedView
 * @subpackage Reports
 * @version $Id$
 */

if (!defined('PGV_PHPGEDVIEW')) {
	header('HTTP/1.0 403 Forbidden');
	exit;
}

define('PGV_CLASS_REPORTHTML_PHP', '');

require_once 'includes/classes/class_reportbase.php';

/**
 * Main PGV Report Class for HTML
 *
 * @package PhpGedView
 * @subpackage Reports
 */
class PGVReportBaseHTML extends PGVReportBase {
	/**
	* Default HTML font name
	* @var string
	*/
	public $defaultHtmlFont = 'Arial';
	/**
	* Cell height ratio
	* @var float
	*/
	public $cellHeightRatio = 1.3;
	/**
	* Ration of the wrap width
	*/
	public $wrapWidthRatio = 1.55;
	/**
	 * Cell padding height
	 */
	public $cPadding = 2;
	/**
	* Current horizontal position
	* @var int
	*/
	public $X = 0;
	/**
	* Current vertical position
	* @var int
	*/
	public $Y = 0;
	/**
	* Currently used style name
	* @var string
	*/
	public $currentStyle = '';
	/**
	* Page number counter
	* @var int
	*/
	public $pageN = 1;
	/**
	* Store the page width without left and right margins
	* @var int
	*/
	public $noMarginWidth = 0;
	/**
	* Last cell height
	* @var int
	*/
	public $lastHeight = 0;
	
	public $largestFontHeight = 0;
	public $maxY = 0;
	public $headerElements = array();
	public $pageHeaderElements = array();
	public $footerElements = array();
	public $bodyElements = array();
	public $printedfootnotes = array();

	/**
	* HTML Setup - PGVReportBaseHTML
	*/
	function setup() {
		parent::setup();

		// Setting up the correct dimensions if Portrait (default) or Landscape
		if ($this->orientation == 'landscape') {
			$tmpw = $this->pagew;
			$this->pagew = $this->pageh;
			$this->pageh = $tmpw;
		}
		// Store the pagewidth without margins
		$this->noMarginWidth = floor($this->pagew - $this->leftmargin - $this->rightmargin);

		if ($this->showGenText) {
			// The default style name for Generated by.... is 'genby'
			$element = new PGVRCellHTML(0, 10, 0, 'C', '', 'genby', 1, '.', '.', 0, 0, '', '', true);
			$element->addText($this->generatedby);
			$element->setUrl(parent::pgv_url);
			$this->footerElements[] = $element;
		}
	}

	function addElement($element) {
		if ($this->processing=="B") return $this->bodyElements[] = $element;
		else if ($this->processing=="H") {
			return $this->headerElements[] = $element;
		}
		else if ($this->processing=="F") {
			return $this->footerElements[] = $element;
		}
	}

	function runPageHeader() {
		foreach($this->pageHeaderElements as $element) {
			if (is_string($element) && $element=="footnotetexts") $this->Footnotes();
			else if (is_string($element) && $element=="addpage") {
				$this->AddPage();
			}
			else if (is_object($element)) {
				$element->render($this);
			}
		}
	}

	function Footnotes() {
		$this->currentStyle = "";
		if(!empty($this->printedfootnotes)) {
			print "<br/>";
			foreach($this->printedfootnotes as $element) {
				$element->renderFootnote($this);
			}
		}
	}

	function run() {
		global $download, $embed_fonts, $rtl_stylesheet, $waitTitle;

		$htmlcode = "
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\">
<head>
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=$this->charset\" />
<meta name=Generator content=\"$this->generatedby\" />
<meta name=\"keywords\" content=\"$this->rkeywords\" />
<meta name=\"description\" content=\"$this->rsubject\" />
<title>".PrintReady(strip_tags($this->title))."</title>
";

		print $htmlcode;

		// Delay all output until we've seen a page header
/*		ob_start();
		$waitTitle = true;
*/
		// Setting up the styles
		print "<style type=\"text/css\">\n";
		$this->PGVRStyles['footer'] = array('name'=>'footer', 'font'=>$this->defaultHtmlFont, 'size'=>'10', 'style'=>'');
		foreach($this->PGVRStyles as $class=>$style) {
			$htmlcode = "";
			$htmlcode .= ".".$class." {\n";
			if ($style['font']=='') $style['font'] = $this->defaultHtmlFont;
			else if ($style['font']=='dejavusans') {
				$style['font'] = $this->defaultHtmlFont;
			}
			$htmlcode .= "font-family: ".$style['font'].";\n";
			$htmlcode .= "font-size: ".($style['size'])."pt;\n";
			// Case-insensitive
			if (stristr($style['style'], 'B')!==false) $htmlcode .= "font-weight: bold;\n";
			if (stristr($style['style'], 'I')!==false) $htmlcode .= "font-style: italic;\n";
			if (stristr($style['style'], 'U')!==false) $htmlcode .= "text-decoration: underline;\n";
			if (stristr($style['style'], 'D')!==false) $htmlcode .= "text-decoration: line-through;\n";
			print $htmlcode."}\n";
		}
		$htmlcode = '';

		//Setting text direction
		if ($this->rtl) {
			$htmlcode = "
body {
	direction: rtl;
	text-align: right;
}
rtl {
	direction: rtl;
	text-align: right;
}
";
		}
		
		$htmlcode .= "
</style>
</head>
<body>
";
		print $htmlcode;
		unset($htmlcode);
		
		if (!isset($this->currentStyle)) $this->currentStyle = "";
		$temp = $this->currentStyle;
		//-- header
//		print "<div id=\"headerdiv\" style=\"position: relative; top: auto; width: ".($this->noMarginWidth)."pt; \">\n";
		print "<div id=\"headerdiv\" style=\"position: relative; top: ".($this->headermargin)."pt; width: ".$this->noMarginWidth."pt;\">\n";
		foreach($this->headerElements as $element) {
			if (is_string($element) && $element=="footnotetexts") $this->Footnotes();
			else if (is_string($element) && $element=="addpage") {
				$this->AddPage();
			}
			else $element->render($this);
		}
		print "</div>\n";

//		print "<script type=\"text/javascript\">\ndocument.getElementById('headerdiv').style.height='".($this->Y)."pt';\n</script>\n";
		print "<script type=\"text/javascript\">\ndocument.getElementById('headerdiv').style.height='".($this->topmargin)."pt';\n</script>\n";
		//-- body

//		$oldy = $this->Y;
		$this->Y=0;
		$this->maxY=0;
		$this->runPageHeader();
		print "<div id=\"bodydiv\" style=\"position: relative; top: auto; width: ".($this->noMarginWidth)."pt; height: 100%;\">\n";
		$this->currentStyle = "";
		foreach($this->bodyElements as $element) {
			if (is_string($element) && $element=="footnotetexts") $this->Footnotes();
			else if (is_string($element) && $element=="addpage") {
				$this->AddPage();
			}
			else if (is_object($element)) {
				$element->render($this);
			}
		}
		print "</div>\n";
		print "<script type=\"text/javascript\">\ndocument.getElementById('bodydiv').style.height='".($this->maxY+2)."pt';\n</script>\n";

/*		if (isset($waitTitle) && $waitTitle) {
			// We haven't found a page title: take default action
			$contents = ob_get_clean();
			echo "<title>Unknown title</title>\n";
			echo $contents;
			$waitTitle = false;
			unset ($contents);
		}
*/		//-- footer
//		$oldy = $this->Y;
		$this->Y=0;
		$this->X=0;
		$this->maxY=0;
		print "<div id=\"footerdiv\" style=\"position: relative; top: auto; width: ".$this->noMarginWidth."pt; height: auto;\">\n";
//		print "<div id=\"footerdiv\" style=\"position: relative; top: auto; width: ".($this->noMarginWidth)."pt; height: ".($this->bottommargin).";\">\n";
		$this->currentStyle = "footer";
		foreach($this->footerElements as $element) {
			if (is_string($element) && $element=="footnotetexts") $this->Footnotes();
			else if (is_string($element) && $element=="addpage") {
				$this->AddPage();
			}
			else if (is_object($element)) {
				$element->render($this);
			}
		}
		$this->currentStyle = $temp;
		print "</div>\n";

		print "<script type=\"text/javascript\">\ndocument.getElementById('footerdiv').style.height='".($this->maxY+2)."pt';\n</script>\n";
//		print "<script type=\"text/javascript\">\ndocument.getElementById('footerdiv').style.height='".($this->footermargin)."pt';\n</script>\n";
		print "</body>\n</html>\n";
	}

	/**
	* Create a new Cell object - PGVReportBaseHTML
	*
	* @param int $width cell width (expressed in points)
	* @param int $height cell height (expressed in points)
	* @param mixed $border Border style
	* @param string $align Text alignement
	* @param string $bgcolor Background color code
	* @param string $style The name of the text style
	* @param int $ln Indicates where the current position should go after the call
	* @param mixed $top Y-position
	* @param mixed $left X-position
	* @param int $fill Indicates if the cell background must be painted (1) or transparent (0). Default value: 0.
	* @param int $stretch Stretch carachter mode
	* @param string $bocolor Border color
	* @param string $tcolor Text color
	* @return object PGVRCellHTML
	*/
	function createCell($width, $height, $border, $align, $bgcolor, $style, $ln, $top, $left, $fill, $stretch, $bocolor, $tcolor, $reseth) {
		return new PGVRCellHTML($width, $height, $border, $align, $bgcolor, $style, $ln, $top, $left, $fill, $stretch, $bocolor, $tcolor, $reseth);
	}

	function createTextBox($width, $height, $border, $bgcolor, $newline, $left, $top, $pagecheck, $style, $fill, $padding) {
		return new PGVRTextBoxHTML($width, $height, $border, $bgcolor, $newline, $left, $top, $pagecheck, $style, $fill, $padding);
	}

	function createText($style, $color) {
		return new PGVRTextHTML($style, $color);
	}

	function createFootnote($style="") {
		return new PGVRFootnoteHTML($style);
	}

	function createPageHeader() {
		return new PGVRPageHeaderHTML();
	}

	function createImage($file, $x, $y, $w, $h, $align, $ln) {
		return new PGVRImageHTML($file, $x, $y, $w, $h, $align, $ln);
	}

	function createLine($x1, $y1, $x2, $y2) {
		return new PGVRLineHTML($x1, $y1, $x2, $y2);
	}

	function createHTML($tag, $attrs) {
		return new PGVRHtmlHTML($tag, $attrs);
	}

	/**
	* Clear the Header - PGVReportBaseHTML
	*/
	function clearHeader() {
		$this->headerElements = array();
	}


	/****************************
	* Local HTML Report functions
	****************************/

	
	/**
	* @todo add page break - <p style='page-break-before:always' />
	*/
	function AddPage() {
//		print("\n\n<p style=\"page-break-before:always;\" /><p/>\n");
		$this->pageN++;
	}

	function addPageHeader($element) {
		$this->pageHeaderElements[] = $element;
		return count($this->headerElements)-1;
	}

	/**
	 * Checks the Footnote and numbers them
	 *
	 * @param object &$footnote
	 * @return boolen false if not numbered befor | object if already numbered
	 */
	function checkFootnote(&$footnote) {
		$ct = count($this->printedfootnotes);
		$val = $footnote->getValue();
		for($i=0; $i < $ct; $i++) {
			if ($this->printedfootnotes[$i]->getValue() == $val) {
				// If this footnote already exist then set up the numbers for this object
				$footnote->setNum($i + 1);
				$footnote->setAddlink($i + 1);
				return $this->printedfootnotes[$i];
			}
		}
		// If this Footnote has not been set up yet
		$footnote->setNum($ct + 1);
		$footnote->setAddlink($ct + 1);
		$this->printedfootnotes[] = $footnote;
		return false;
	}

	/**
	* Clear the Page Header - PGVReportBaseHTML
	*/
	function clearPageHeader() {
		$this->pageHeaderElements = array();
	}

	/**
	* Count the number of lines - PGVReportBaseHTML
	* @param string &$str
	* @return int Number of lines. 0 if empty line
	*/
	function countLines(&$str) {
		if ($str == "")
			return 0;
		return (substr_count($str, "\n") + 1);
	}

	function getCurrentStyle() {
		return $this->currentStyle;
	}

	function getCurrentStyleHeight() {
		if (empty($this->currentStyle)) {
			return $this->defaultFontSize;
		}
		$style = $this->getStyle($this->currentStyle);
		return $style["size"];
	}
	
	function getFootnotesHeight() {
		$h=0;
		foreach($this->printedfootnotes as $element) {
			$h+=$element->getFootnoteHeight($this);
		}
		return $h;
	}
	
	/**
	* Get the maximum width from current position to the margin - PGVReportBaseHTML
	*/
	function getRemainingWidth() {
		return floor($this->noMarginWidth - $this->X);
	}

	function getPageHeight() {
		return $this->pageh - $this->topmargin;
	}

	function getStringWidth($text) {
		$style = $this->getStyle($this->currentStyle);
		return UTF8_strlen($text) * ($style['size']/2);
	}

	function getStyle($s) {
		if (!isset($this->PGVRStyles[$s]) || $s=='') {
			$s = $this->currentStyle;
			if (empty($s)) {
				$s = 'footer';
			}
			$this->PGVRStyles[$s] = $s;
		}
		return $this->PGVRStyles[$s];
	}

	/**
	* Get a text height in points
	* @param &$str
	* @return int
	*/
	function getTextCellHeight(&$str) {
		// Count the number of lines to calculate the height
		$nl = $this->countLines($str);
		// Calculate the cell height
		return ceil(($this->getCurrentStyleHeight() * $this->cellHeightRatio) * $nl) + $this->cPadding;
	}

	function GetX() {
		return $this->X;
	}

	function GetY() {
		return $this->Y;
	}

	function PageNo() {
		return $this->pageN;
	}

	function setCurrentStyle($s) {
		$this->currentStyle = $s;
	}

	function SetX($x) {
		$this->X = $x;
	}

	function SetY($y) {
		$this->Y = $y;
		if ($this->maxY<$y) $this->maxY=$y;
	}

	function SetXY($x, $y) {
		$this->X = $x;
		$this->Y = $y;
		if ($this->maxY<$y) $this->maxY=$y;
	}

	/**
	* Wrap text - PGVReportBaseHTML
	* @param string &$str Text to wrap
	* @param int $width Width in points the text has to fit into
	* @return string
	*/
	function textWrap(&$str, $width) {
	// Calculate the line width
	$lw = floor($width / ($this->getCurrentStyleHeight() / 2));
	// Wordwrap each line
	$lines = explode("\n", $str);
	// Line Feed counter
	$lfct = count($lines);
	$wraptext = '';
	foreach($lines as $line) {
		$wtext = '';
		// If text contains space then use regular wordwrap
		if (substr_count($line, " ") > 0) {
			$wtext = wordwrap($line, $lw, "\n", true);
		}
		else $wtext = $this->textWrapMB($line, $width);
		$wraptext .= $wtext;
		// Add a new line as long as it's not the last line
		if ($lfct > 1) $wraptext.= "\n";
		$lfct--;
	}
	unset($lines, $wtext);
	return $wraptext;
	}

	/**
	* Wrap text when the text contains no spaces - PGVReportBaseHTML
	* mb_functions  has to be used or the UNICODE text will be unreadable where the text will be splitted
	* @param string $str
	* @param int $width The width in points where the text has to fit into
	* @return string
	*/
	function textWrapMB($str, $width = 100) {
		$width = floor($width / ($this->getCurrentStyleHeight() / $this->wrapWidthRatio));
		$result = array();
		$current = $str;
		while (UTF8_strlen($current, $this->charset) > $width) {
			$result[] = UTF8_substr($current, 0, $width, $this->charset);
			$current = UTF8_substr($current, $width, 2048, $this->charset);
		}
		$result[] = $current;
		return implode("\n", $result);
	}

	/**
	* Write text - PGVReportBaseHTML
	* @param string $text Text to print
	* @param string $color HTML RGB color code (Ex: #001122)
	*/
	function write($text, $color='') {
//		global $waitTitle;
		
		$style = $this->getStyle($this->getCurrentStyle());

		// Look for first occurrence of a page header,
		// and use this to complete the HTML <title> tag
/*		if ((isset($waitTitle)) and ($waitTitle) and ($style['name']=='header')) {
			$contents = ob_get_clean();
			echo '<title>', PrintReady(strip_tags($text)), "</title>\n";
			echo $contents;
			$waitTitle = false;		// We're no longer waiting for a page header
			unset ($contents);
		}
*/		$styleAdd = "";
		if (!empty($color)) {
			$styleAdd .= "color: ".$color.";";
		}
		if ($style['font']=='') {
			$style['font'] = $this->defaultHtmlFont;
		}
		print "<span class=\"".$style['name']."\"";
		if (!empty($styleAdd)) {
			print " style=\"".$styleAdd."\"";
		}
		print ">";
		print nl2br(PrintReady($text, false, false));
		print "</span>";
	}

} //-- end PGVReport


/**
* Report Base class of PGVReportBaseHTML
*
* @global class $pgvreport
* @ignore
*/
$pgvreport = new PGVReportBaseHTML();

$PGVReportRoot = $pgvreport;


/**
 * Cell element - HTML
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info and fix border and filling
*/
class PGVRCellHTML extends PGVRCell {
	/**
	* Create a class CELL for HTML
	* @param int $width cell width (expressed in points)
	* @param int $height cell height (expressed in points)
	* @param mixed $border Border style
	* @param string $align Text alignement
	* @param string $bgcolor Background color code
	* @param string $style The name of the text style
	* @param int $ln Indicates where the current position should go after the call
	* @param mixed $top Y-position
	* @param mixed $left X-position
	* @param int $fill Indicates if the cell background must be painted (1) or transparent (0). Default value: 0.
	* @param int $stretch Stretch carachter mode
	* @param string $bocolor Border color
	* @param string $tcolor Text color
	* @param boolean $reseth
	*/
	function PGVRCellHTML($width, $height, $border, $align, $bgcolor, $style, $ln, $top, $left, $fill, $stretch, $bocolor, $tcolor, $reseth) {
		parent::PGVRCell($width, $height, $border, $align, $bgcolor, $style, $ln, $top, $left, $fill, $stretch, $bocolor, $tcolor, $reseth);
	}

	/**
	* HTML Cell renderer
	* @param PGVReportBaseHTML &$html
	*/
	function render(&$html) {

		if (strstr($this->text, "{{nb}}") !== false) {
			return;
		}

		// Setup the style name
		if ($html->getCurrentStyle() != $this->styleName) {
			$html->setCurrentStyle($this->styleName);
		}
		$temptext = preg_replace("/#PAGENUM#/", $html->PageNo(), $this->text);

		// Adjust the positions
		if ($this->left == ".") {
			$this->left = $html->GetX();
		}
		else $html->SetX($this->left);
		if ($this->top == ".") {
			$this->top = $html->GetY();
		}
		else $html->SetY($this->top);

		// Start collecting the HTML code
		$htmlcode = "<div style=\"padding-left:1pt; position:absolute; top:".$this->top."pt; left:".$this->left."pt;";
		// Background color
		if (!empty($this->bgcolor)) {
			$htmlcode .= " background-color:".$this->bgcolor.";";
		}
		// Border setup
		$bpixX = 0;
		$bpixY = 0;
		if (!empty($this->border)) {
			// Border all around
			if ($this->border==1) {
				$htmlcode .= " border:solid ";
				if (!empty($this->bocolor)) $htmlcode .= $this->bocolor;
				else $htmlcode .= "black";
				$htmlcode .= " 1pt;";
				$bpixX = 1;
				$bpixY = 1;
			}
			else {
				if (stristr($this->border, 'T') !== false) {
					$htmlcode .= " border-top:solid ";
					if (!empty($this->bocolor)) $htmlcode .= $this->bocolor;
					else $htmlcode .= "black";
					$htmlcode .= " 1pt;";
					$bpixY = 1;
				}
				if (stristr($this->border, 'B') !== false) {
					$htmlcode .= " border-bottom:solid ";
					if (!empty($this->bocolor)) $htmlcode .= $this->bocolor;
					else $htmlcode .= "black";
					$htmlcode .= " 1pt;";
					$bpixY = 1;
				}
				if (stristr($this->border, 'R') !== false) {
					$htmlcode .= " border-right:solid ";
					if (!empty($this->bocolor)) $htmlcode .= $this->bocolor;
					else $htmlcode .= "black";
					$htmlcode .= " 1pt;";
					$bpixX = 1;
				}
				if (stristr($this->border, 'L') !== false) {
					$htmlcode .= " border-left:solid ";
					if (!empty($this->bocolor)) $htmlcode .= $this->bocolor;
					else $htmlcode .= "black";
					$htmlcode .= " 1pt;";
					$bpixX = 1;
				}
			}
		}
		// Check the width if set to page wide OR set by xml to larger then page wide
		if (($this->width == 0) or ($this->width > $html->getRemainingWidth())) {
			$this->width = $html->getRemainingWidth();
		}
		// If there is any text
		if (!empty($temptext)) {
			// Wrap the text
			$temptext = $html->textWrap($temptext, $this->width);
			$tmph = $html->getTextCellHeight($temptext);
			if ($tmph > $this->height) {
				$this->height = $tmph;
			}
		}
		// Check the last cell height and ajust with the current cell height
		if ($html->lastHeight > $this->height) {
			$this->height = $html->lastHeight;
		}

		$htmlcode .= " width:".($this->width - $bpixX)."pt; height:".($this->height - $bpixY)."pt;";

		// Text alignment
		switch($this->align) {
			case 'C':
				$htmlcode .= " text-align:center; ";
				break;
			case 'L':
				$htmlcode .= " text-align:left; ";
				break;
			case 'R':
				$htmlcode .= " text-align:right; ";
				break;
		}

		// Print the collected HTML code
		print $htmlcode."\">\n";
		unset($htmlcode);

		// Print URL
		if (!empty($this->url))
			print "<a href=\"$this->url\">";
		if (!empty($temptext))
			$html->write($temptext, $this->tcolor);
		if (!empty($this->url))
			print "</a>";
		
		// Finish the cell printing and start to clean up
		print "</div>\n";

		// Where to place the next position
		// -> Next to this cell in the same line
		if ($this->newline == 0) {
			$html->SetXY($this->left + $this->width, $this->top);
			$html->lastHeight = $this->height;
		}
		// -> On a new line at the margin - Default
		else if ($this->newline == 1) {
			$html->SetXY(0, $html->GetY() + $this->height);
			// Reset the last cell height for the next line
			$html->lastHeight = 0;
		}
		// -> On a new line at the end of this cell
		else if ($this->newline == 2) {
			$html->SetXY($html->GetX() + $this->width, $html->GetY() + $this->height);
			// Reset the last cell height for the next line
			$html->lastHeight = 0;
		}
	}
}

/**
* HTML element - HTML Report
*
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRHtmlHTML extends PGVRHtml {

	function PGVRHtmlHTML($tag, $attrs) {
		parent::PGVRHtml($tag, $attrs);
	}

	/**
	*  @todo temporary fix
	*/
	function render(&$html, $sub = false, $inat=true) {
//		global $embed_fonts;
		
		if (!empty($this->attrs['pgvrstyle'])) $html->setCurrentStyle($this->attrs['pgvrstyle']);
		
		$this->text = $this->getStart().$this->text;
		foreach($this->elements as $element) {
			if (is_string($element) && $element=="footnotetexts") $html->Footnotes();
			else if (is_string($element) && $element=="addpage") {
				$html->AddPage();
			}
			else if ($element->get_type()=='PGVRHtml') {
				$this->text .= $element->render($html, true, false);
			}
			else $element->render($html);
		}
		$this->text .= $this->getEnd();
		if ($sub) return $this->text;

		// If not called by an other attribute
		if ($inat) {
			$startX = $html->GetX();
			$startY = $html->GetY();
			$width = $html->getRemainingWidth();
			print "<div style=\"position: absolute; top: ".$startY."pt; left: ".$startX."pt; width: ".$width."pt;\">";
			$startY += $html->getCurrentStyleHeight() + 2;
			$html->SetY($startY);
		}

		print $this->text;

		if ($inat) {
			print "</div>\n";
		}
	}
}

/**
 * TextBox element - HTML Report
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRTextBoxHTML extends PGVRTextBox {

	function PGVRTextBoxHTML($width, $height, $border, $bgcolor, $newline, $left, $top, $pagecheck, $style, $fill, $padding) {
		parent::PGVRTextBox($width, $height, $border, $bgcolor, $newline, $left, $top, $pagecheck, $style, $fill, $padding);
	}

	function render(&$html) {

		$html->largestFontHeight = 0;
		
		$newelements = array();
		$lastelement = "";
		//-- collapse duplicate elements
		for($i=0; $i<count($this->elements); $i++) {
			$element = $this->elements[$i];
			if (is_object($element)) {
				if ($element->get_type()=="PGVRText") {
					if (empty($lastelement)) $lastelement = $element;
					else {
						if ($element->getStyleName()==$lastelement->getStyleName()) {
							$lastelement->addText(preg_replace("/\n/", "<br />", $element->getValue()));
						}
						else {
							if (!empty($lastelement)) {
								$newelements[] = $lastelement;
								$lastelement = $element;
							}
						}
					}
				}
				//-- do not keep empty footnotes
				else if (($element->get_type()!="PGVRFootnote")||(trim($element->getValue())!="")) {
					if (!empty($lastelement)) {
						$newelements[] = $lastelement;
						$lastelement = "";
					}
					$newelements[] = $element;
				}
			}
			else {
				if (!empty($lastelement)) {
					$newelements[] = $lastelement;
					$lastelement = "";
				}
				$newelements[] = $element;
			}
		}
		if (!empty($lastelement)) $newelements[] = $lastelement;
		$this->elements = $newelements;
		unset($newelements);


		// Current position
		if ($this->left == ".") {
			$this->left = $html->GetX();
		}
		else $html->SetX($this->left);
		// Current position (top)
		if ($this->top == ".") {
			$this->top = $html->GetY();
		}
		else $html->SetY($this->top);

		// Check the width if set to page wide OR set by xml to larger then page wide
		if (($this->width == 0) or ($this->width > $html->getRemainingWidth())) {
			$this->width = $html->getRemainingWidth();
		}

		//-- calculate the text box height
		$cHT = 0;		// Number of lines, will be converted to height
		$h = 0;
		$w = 0;
		// Buggy.. height is calculated only when there are more then 1 lines exists
		for($i=0; $i < count($this->elements); $i++) {
			if (is_object($this->elements[$i])) {
				$ew = $this->elements[$i]->setWrapWidth($this->width-$w, $this->width);
				if ($ew==$this->width)
					$w=0;
				//-- $lw is an array 0=>last line width, 1=1 if text was wrapped, 0 if text did not wrap
				$lw = $this->elements[$i]->getWidth($html);
				$cHT += $lw[2];
				if ($lw[1]==1)
					$w = $lw[0];
				else if ($lw[1]==2) {
					$w=0;
				}
				else $w += $lw[0];
				if ($w>$this->width)
					$w = $lw[0];
				$eh = $this->elements[$i]->getHeight($html);
				//if ($eh>$h) $h = $eh;
				//else if ($lw[1]) $h+=$eh;
				$h += abs($eh);
			}
			else {
				$h += abs($html->getFootnotesHeight());
			}
		}
		// This will fix temporary the 1 line text height
		// Convert number of LF to points if any element exist
		if ($i > 0) {
			// Number of LF but at least one line
			$cHT = ($cHT + 1) * $html->cellHeightRatio;
			// Calculate the cell hight with the largest font size used
			$cHT = $cHT * $html->largestFontHeight;
			// Add cell padding
			if ($this->padding) {
				$cHT += $html->cPadding;
			}
			if ($this->height < $cHT) {
				$this->height = $cHT;
			}
		}
		// Just in case, check it anyway
		if ($h > $this->height) {
			$this->height = $h;
		}
		unset($lw, $cHT, $h, $w);

		if ($html->lastHeight > $this->height) {
			$this->height = $html->lastHeight;
		}

/*		
		if ($this->pagecheck) {
			// This will be a global function
		}
*/
		print "<div style=\"position: absolute; padding-left: 1pt; left: ".$this->left."pt; top: ".$this->top."pt; width: ".($this->width-1)."pt; height: ".$this->height."pt;";
		// Background color
		if ($this->fill) {
			if (!empty($this->bgcolor)) {
				print " background-color: ".$this->bgcolor.";";
			}
		}
		if ($this->border) {
			print " border: solid black 1pt;";
		}
		print "\">\n";

		// Print the text elements
		foreach($this->elements as $element) {
			if (is_string($element) && $element=="footnotetexts") $html->Footnotes();
			else if (is_string($element) && $element=="addpage") {
				$html->AddPage();
			}
			else $element->render($html, $this->left, false);
		}
		print "</div>\n";

		// New line and some clean up
		if ($this->newline) {
			$html->SetXY(0, $this->top + $this->height + 1);
			$html->lastHeight = 0;
		}
		else {
			$html->SetXY($this->left + $this->width, $this->top);
			$html->lastHeight = $this->height;
		}
	}
}

/**
 * Text element - HTML Report
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRTextHTML extends PGVRText {

	function PGVRTextHTML($style, $color) {
		parent::PGVRText($style, $color);
	}

	/**
	* @todo temporary fix
	* @param PGVReportBaseHTML &$html
	* @param int $curx
	* @param boolean $attrib Is is called from a different element?
	*/
	function render(&$html, $curx=0, $attrib=true) {
//		global $embed_fonts;
		
		// Setup the style name
		if ($html->getCurrentStyle() != $this->styleName) {
			$html->setCurrentStyle($this->styleName);
		}
		$temptext = preg_replace("/#PAGENUM#/", $html->PageNo(), $this->text);
		// If any text at all
		if (!empty($temptext)) {
			// If called by an other element
			if (!$attrib) {
				$html->write($temptext, $this->color);
			}
			else {
				// Save the start positions
				$startX = $html->GetX();
				$startY = $html->GetY();
				$width = $html->getRemainingWidth();
				// If text is wider then page width then wrap it
				if ($html->GetStringWidth($temptext) > $width) {
					$lines = split("\n", $temptext);
					foreach ($lines as $line) {
						print "<div style=\"position:absolute; top:".$startY."pt; left:".$startX."pt; width:".$width."pt;\">";
						$line = $html->textWrap($line, $width);
						$startY += $html->getTextCellHeight($line);
						$html->SetY($startY);
						$html->write($line, $this->color);
						print "</div>\n";
					}
				}
				else {
					print "<div style=\"position:absolute; top:".$startY."pt; left:".$startX."pt; width:".$width."pt;\">";
					$html->write($temptext, $this->color);
					print "</div>\n";
					$html->SetX($startX + $html->GetStringWidth($temptext));
					if ($html->countLines($temptext) != 1) {
						$html->SetXY(0, ($startY + $html->getTextCellHeight($temptext)));
					}
				}
			}
		}
	}

	function getHeight(&$html) {
		$ct = substr_count($this->text, "\n");
		if ($ct>0) {
			$ct += 1;
		}
		$style = $html->getStyle($this->styleName);
		return ($style["size"] * $ct) * $html->cellHeightRatio;
	}

	/**
	* Get the width of text and wrap it too
	* @param PGVReportBaseHTML &$html
	* @return array
	*/
	function getWidth(&$html) {
		// Setup the style name
		if ($html->getCurrentStyle() != $this->styleName) {
			$html->setCurrentStyle($this->styleName);
		}
		
		// Check for the largest font size in the box
		$fsize = $html->getCurrentStyleHeight();
		if ($fsize > $html->largestFontHeight) {
			$html->largestFontHeight = $fsize;
		}

		// Get the line width for the text in points
		$lw = $html->GetStringWidth($this->text);
		// Line Feed counter - Number of lines in the text
		$lfct = $html->countLines($this->text);
		// If there is still remaining wrap width...
		if ($this->wrapWidthRemaining > 0) {
			// Check with line counter too!
			if (($lw >= $this->wrapWidthRemaining) or ($lfct > 1)) {
				$newtext = "";
				$wrapWidthRemaining = $this->wrapWidthRemaining;
				$lines = explode("\n", $this->text);
				// Go throught the text line by line
				foreach($lines as $line) {
					// Line width in points + a little margin
					$lw = $html->GetStringWidth($line);
					// If the line has to be wraped
					if ($lw > $wrapWidthRemaining) {
						$words = explode(' ', $line);
						$lw = 0;
						foreach($words as $word) {
							$lw += $html->GetStringWidth($word." ");
							if ($lw <= $wrapWidthRemaining) {
								$newtext.=$word." ";
							}
							else {
								$lw = $html->GetStringWidth($word." ");
								$newtext .= "\n$word ";
								// Reset the wrap width to the cell width
								$wrapWidthRemaining = $this->wrapWidthCell;
							}
						}
					}
					else $newtext .= $line;
					// Check the Line Feed counter
					if ($lfct > 1) {
						// Add a new line feed as long as it's not the last line
						$newtext.= "\n";
						// Reset the line width
						$lw = 0;
						// Reset the wrap width to the cell width
						$wrapWidthRemaining = $this->wrapWidthCell;
					}
					$lfct--;
				}
				$this->text = $newtext;
				$lfct = substr_count($this->text, "\n");
				return array($lw, 1, $lfct);
			}
		}
		$l = 0;
		$lfct = substr_count($this->text, "\n");
		if ($lfct > 0) {
			$l = 2;
		}
		return array($lw, $l, $lfct);
	}
}

/**
 * Footnote element
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRFootnoteHTML extends PGVRFootnote {

	function PGVRFootnoteHTML($style="") {
		parent::PGVRFootnote($style);
	}

	/**
	* HTML Footnotes number renderer
	* @param PGVReportBaseHTML &$html
	*/
	function render(&$html) {
		$html->setCurrentStyle("footnotenum");
		print "<sup><a href=\"#footnote".$this->num."\">";
		$html->write($this->numText);
		print "</a></sup>\n";
	}

	/**
	* Write the Footnote text
	* Uses style name "footnote" by default
	*
	* @param PGVReportBaseHTML &$html
	*/
	function renderFootnote(&$html) {
		
		if ($html->getCurrentStyle()!=$this->styleName)
			$html->setCurrentStyle($this->styleName);
		
		$temptext = preg_replace("/#PAGENUM#/", $html->PageNo(), $this->text);
		print "<a name=\"footnote".$this->num."\" class=\"footnote\">".$this->num.". ";
		$html->write($temptext);
		print "</a><br /><br />\n";
		$html->SetXY(0, $html->GetY()+$this->getFootnoteHeight($html));
	}

	function getFootnoteHeight(&$html) {
		$ct = substr_count($this->text, "\n");
		$ct += 3;
		$style = $html->getStyle($this->styleName);
		return ($style["size"] * $ct) * $html->cellHeightRatio;
	}
	
	/**
	* Get the width of text
	* @param PGVReportBaseHTML &$html
	* @return array
	*/
	function getWidth(&$html) {
		// Setup the style name
		$html->setCurrentStyle("footnotenum");

		// Check for the largest font size in the box
		$fsize = $html->getCurrentStyleHeight();
		if ($fsize > $html->largestFontHeight) {
			$html->largestFontHeight = $fsize;
		}

		$html->checkFootnote($this);

		// Get the line width for the text in points + a little margin
		$lw = $html->GetStringWidth($this->numText);
		// Line Feed counter - Number of lines in the text
		$lfct = $html->countLines($this->numText);
		// If there is still remaining wrap width...
		if ($this->wrapWidthRemaining > 0) {
			// Check with line counter too!
			if (($lw >= $this->wrapWidthRemaining) or ($lfct > 1)) {
				$newtext = "";
				$wrapWidthRemaining = $this->wrapWidthRemaining;
				$lines = explode("\n", $this->numText);
				// Go throught the text line by line
				foreach($lines as $line) {
					// Line width in points + a little margin
					$lw = $html->GetStringWidth($line);
					// If the line has to be wraped
					if ($lw > $wrapWidthRemaining) {
						$words = explode(' ', $line);
						$lw = 0;
						foreach($words as $word) {
							$lw += $html->GetStringWidth($word." ");
							if ($lw <= $wrapWidthRemaining) {
								$newtext.=$word." ";
							}
							else {
								$lw = $html->GetStringWidth($word." ");
								$newtext .= "\n$word ";
								// Reset the wrap width to the cell width
								$wrapWidthRemaining = $this->wrapWidthCell;
							}
						}
					}
					else $newtext .= $line;
					// Check the Line Feed counter
					if ($lfct > 1) {
						// Add a new line feed as long as it's not the last line
						$newtext.= "\n";
						// Reset the line width
						$lw = 0;
						// Reset the wrap width to the cell width
						$wrapWidthRemaining = $this->wrapWidthCell;
					}
					$lfct--;
				}
				$this->numText = $newtext;
				$lfct = substr_count($this->numText, "\n");
				return array($lw, 1, $lfct);
			}
		}
		$l = 0;
		$lfct = substr_count($this->numText, "\n");
		if ($lfct > 0) {
			$l = 2;
		}
		return array($lw, $l, $lfct);
	}
}

/**
 * PageHeader element
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRPageHeaderHTML extends PGVRPageHeader {
	function PGVRPageHeaderHTML() {
		parent::PGVRPageHeader();
	}

	function render(&$html) {
		$html->clearPageHeader();
		foreach($this->elements as $element) {
			$html->addPageHeader($element);
		}
	}
}

/**
 * image element
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRImageHTML extends PGVRImage {

	function PGVRImageHTML($file, $x, $y, $w, $h, $align, $ln) {
		parent::PGVRImage($file, $x, $y, $w, $h, $align, $ln);
	}

	/**
	* Image renderer
	* @param PGVReportBaseHTML &$html
	*/
	function render(&$html) {
		global $lastpicbottom, $lastpicpage, $lastpicleft, $lastpicright;
		
		if ($this->x==0) $this->x=$html->GetX();
		if ($this->y==0) {
			//-- first check for a collision with the last picture
			if (isset($lastpicbottom)) {
				if (($html->PageNo()==$lastpicpage)&&($lastpicbottom >= $html->GetY())&&($this->x>=$lastpicleft)&&($this->x<=$lastpicright))
					$html->SetY($lastpicbottom+5);
			}
			$this->y=$html->GetY();
		}

		// Image alignment
		switch($this->align) {
			case 'L':
				print "<div style=\"position:absolute; top:".$this->y."pt; left:0pt; width:".$html->getRemainingWidth()."pt; text-align:left;\">\n";
				print "<img src=\"$this->file\" style=\"width: ".$this->width."pt; height: ".$this->height."pt;\" alt=\"\" />\n</div>\n";
				break;
			case 'C':
				print "<div style=\"position:absolute; top:".$this->y."pt; left:0pt; width:".$html->getRemainingWidth()."pt; text-align:center;\">\n";
				print "<img src=\"$this->file\" style=\"width: ".$this->width."pt; height: ".$this->height."pt;\" alt=\"\" />\n</div>\n";
				break;
			case 'R':
				print "<div style=\"position:absolute; top:".$this->y."pt; left:0pt; width:".$html->getRemainingWidth()."pt; text-align:right;\">\n";
				print "<img src=\"$this->file\" style=\"width: ".$this->width."pt; height: ".$this->height."pt;\" alt=\"\" />\n</div>\n";
				break;
			default:
				print "<img src=\"$this->file\" style=\"position:absolute; left:".$this->x."pt; top:".$this->y."pt; width:".$this->width."pt; height:".$this->height."pt;\" alt=\"\" />\n";
		}

		$lastpicpage = $html->PageNo();
		$lastpicleft = $this->x;
		$lastpicright = $this->x + $this->width;
		$lastpicbottom = $this->y + $this->height;
		// Setup for the next line
		if ($this->line == 'N') {
			$html->SetY($lastpicbottom);
		}
	}
} //-- END PGVRImage

/**
 * Line element - HTML Report
 *
* @package PhpGedView
* @subpackage Reports
* @todo add info
*/
class PGVRLineHTML extends PGVRLine {
	/**
	* Create a line class -HTML
	* @param mixed $x1
	* @param mixed $y1
	* @param mixed $x2
	* @param mixed $y2
	*/
	function PGVRLineHTML($x1, $y1, $x2, $y2) {
		parent::PGVRLine($x1, $y1, $x2, $y2);
	}

	/**
	* HTML line renderer
	* @param PGVReportBaseHTML &$html
	*/
	function render(&$html) {
		if ($this->x1==".") $this->x1=$html->GetX();
		if ($this->y1==".") $this->y1=$html->GetY();
		if ($this->x2==".") {
			$this->x2 = $html->getRemainingWidth();
		}
		if ($this->y2==".") $this->y2=$html->GetY();
		// TODO Non verticle or horizontal lines can use a series of divs absolutely positioned
		// Vertical line
		if ($this->x1 == $this->x2) {
			print "<div style=\"position:absolute; overflow:hidden; border-left:solid black 1pt; left:".($this->x1)."pt; top:".($this->y1+1)."pt; width:1pt; height:".($this->y2-$this->y1)."pt;\"> </div>\n";
		}
		// Horizontal line
		if ($this->y1 == $this->y2) {
			print "<div style=\"position:absolute; overflow:hidden; border-top:solid black 1pt; left:".$this->x1."pt; top:".($this->y1+1)."pt; width:".($this->x2-$this->x1)."pt; height:1pt;\"> </div>\n";
		}
	}
} //-- END PGVRLine

?>
